{"version":3,"sources":["webpack:///./src/templates/tags.tsx","webpack:///./node_modules/@material-ui/core/esm/CardContent/CardContent.js","webpack:///./src/components/postExcerpt.tsx"],"names":["data","pageContext","tagName","safe","allMdx","site","edges","siteMetadata","author","title","meta","name","content","map","edge","i","node","frontmatter","fields","timeToRead","excerpt","createdAt","updatedAt","categories","slug","key","moment","pageQuery","props","ref","classes","className","_props$component","component","Component","other","root","withStyles","padding","paddingBottom","useStyles","makeStyles","theme","card","margin","spacing","borderLeft","backgroundColor","subheaderSpan","marginRight","fontSize","typography","h2","mobileCategories","display","PostExcerpt","cats","c","tag","Card","elevation","CardHeader","titleTypographyProps","to","children","subheader","format","Typography","variant"],"mappings":"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","file":"component---src-templates-tags-tsx-672c8c03c112d55743dc.js","sourcesContent":["import { graphql } from 'gatsby';\nimport moment from 'moment';\nimport React from 'react';\nimport Helmet from 'react-helmet';\nimport { GlobalLayout } from '../components/Layout/global';\nimport { PostExcerpt } from '../components/postExcerpt';\nimport { TagPage } from '../gatsby-queries';\nimport { safe } from '../utils';\n\ninterface Props {\n  data: TagPage;\n  pageContext: { tagRegex: string; tagName: string };\n}\n\nexport default ({ data, pageContext }: Props) => {\n  const { tagName } = safe(pageContext);\n\n  const { allMdx, site } = safe(data);\n  const { edges } = safe(allMdx);\n  const { siteMetadata } = safe(site);\n  const { author } = safe(siteMetadata);\n\n  return (\n    <GlobalLayout>\n      <Helmet\n        title={`${tagName} posts`}\n        meta={[\n          { name: 'description', content: `posts tagged with ${tagName}` },\n          { name: 'keywords', content: `${tagName}` },\n          { name: 'author', content: author || '' },\n        ]}\n      />\n      {edges &&\n        edges.map((edge, i) => {\n          const { node } = safe(edge);\n          const { frontmatter, fields, timeToRead, excerpt } = safe(node);\n          const { title, createdAt, updatedAt, categories } = safe(frontmatter);\n          const { slug } = safe(fields);\n\n          return (\n            <PostExcerpt\n              key={i}\n              title={title || ''}\n              createdAt={moment(createdAt || '')}\n              updatedAt={moment(updatedAt || '')}\n              slug={slug || ''}\n              categories={categories || []}\n              timeToRead={timeToRead || 0}\n              excerpt={excerpt || ''}\n            />\n          );\n        })}\n    </GlobalLayout>\n  );\n};\n\n// tagRegex is a case insensitive regex /tagname/i\nexport const pageQuery = graphql`\n  query TagPage($tagRegex: String) {\n    site {\n      siteMetadata {\n        title\n        description\n        keywords\n        author\n      }\n    }\n    allMdx(\n      sort: { fields: frontmatter___updatedAt, order: DESC }\n      filter: { frontmatter: { categories: { regex: $tagRegex } } }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n            createdAt\n            updatedAt\n            categories\n          }\n          fields {\n            slug\n          }\n          timeToRead\n          excerpt\n        }\n      }\n    }\n  }\n`;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  }\n};\nvar CardContent = /*#__PURE__*/React.forwardRef(function CardContent(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardContent'\n})(CardContent);","import { Card, CardContent, CardHeader, makeStyles, Theme, Typography } from '@material-ui/core';\nimport { Moment } from 'moment';\nimport React from 'react';\nimport { Link } from './link';\nimport { TagChip } from './tagChip';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  card: {\n    margin: `${theme.spacing(2)}px 0px`,\n    borderLeft: '4px solid rgba(0,0,0,.2)',\n    backgroundColor: 'rgba(0,0,0,.05)',\n  },\n  subheaderSpan: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    fontSize: theme.typography.h2.fontSize,\n  },\n  mobileCategories: {\n    display: 'block',\n  },\n}));\n\ninterface Props {\n  title: string;\n  createdAt: Moment;\n  updatedAt: Moment;\n  slug: string;\n  categories: (string | null)[];\n  timeToRead: number;\n  excerpt: string;\n}\n\nexport const PostExcerpt = ({ slug, title, createdAt, updatedAt, categories, timeToRead, excerpt }: Props) => {\n  const classes = useStyles();\n  const cats = (\n    <span>\n      {categories.map((c, i) => {\n        return c && <TagChip key={i} tag={c} />;\n      })}\n      <TagChip tag={`${timeToRead} minute read`} />\n    </span>\n  );\n\n  return (\n    <Card elevation={0} classes={{ root: classes.card }}>\n      <CardHeader\n        titleTypographyProps={{ classes: { root: classes.title } }}\n        title={<Link to={slug} children={title} />}\n        subheader={\n          <span>\n            <span className={classes.subheaderSpan}>created: {createdAt.format('ll')}</span>\n            <span className={classes.subheaderSpan}>updated: {updatedAt.format('ll')}</span>\n          </span>\n        }\n      />\n      <CardContent>\n        <span className={classes.mobileCategories} children={cats} />\n        <Typography variant=\"body2\">{excerpt}</Typography>\n      </CardContent>\n    </Card>\n  );\n};\n"],"sourceRoot":""}