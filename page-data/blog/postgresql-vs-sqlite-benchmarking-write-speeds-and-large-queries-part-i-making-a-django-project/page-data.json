{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/postgresql-vs-sqlite-benchmarking-write-speeds-and-large-queries-part-i-making-a-django-project/","result":{"data":{"site":{"siteMetadata":{"author":"Jeff Willette"}},"authorAvatar":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='400'%20viewBox='0%200%20400%20400'%20preserveAspectRatio='none'%3e%3cpath%20d='M154%2018l-12%202c-4%202-38%203-47%201-13-3-20-1-13%202%205%202%2010%207%2010%209l1%207%201%205c-2%200-5-4-8-8l-2-4-1%203%201%205%201%203c-1%200-2-1-2-3-3-7-5%200-5%2015-1%2014%205%2024%2016%2026l6%202-5%2013c-11%2025-12%2031-15%2071v11h-3c-6%201-7%206-6%2017v17c-3%2024%201%2049%2011%2059%203%203%204%205%205%2010%206%2032%2010%2038%2037%2067%2015%2016%2017%2018%2017%2021%200%204-7%2018-10%2020-7%205-14%208-26%2010a271%20271%200%200047-1l-3-1-2-21%205%204%206%204v1c-1%200%207%206%209%206v1c-2%203-1%207%203%208%203%200%204-1%202-2l-1-2%202%201%209%201%208%201c1%202%2018%201%2018%200l-1-2-1-4-1-4-1-1c1-2%200-2-2-1-5%201-3-1%204-4l20-14%207-5%2013-12c8-7%208-7%208-4a587%20587%200%2000-4%2030c1%205-5%2012-14%2019l-3%203h43c23%200%2042%200%2041-1l-15-4-21-7-7-3c-5-2-7-3-11-9l-5-7c-1%200-1-11%201-24%201-6%202-8%205-12%2010-10%2020-30%2023-45%202-7%203-8%209-8%2019-3%2025-8%2031-28%206-16%207-25%207-43%200-19-1-24-8-28-3-2-4-2-8-1s-4%201-6-1c-3-4-7-49-5-58%202-11-2-25-10-35-4-5-5-7-3-11%203-3%202-7-2-12l-4-5c0-2-7-13-12-18s-15-11-18-11l-2-1c0-1-11-3-26-4-20-1-31-3-34-4l-27-4-15%202m-9%208l33%206c6%200%208%201%208%202l-2%202c-3%201-2%201%204%203l8%202c-1-3%203-2%2010%202l7%203-10-7-7-5c-1-2-14-5-27-5-5%200-7%200-8-2l-10-2c-6%200-8%200-6%201m-30%202l23%206c2%201%203%201%203%203-1%202%200%203%2010%204%208%200%209-1%201-3-5-1-5-3-1-3l-8-2a323%20323%200%2001-28-5M80%2047c0%206%202%2015%204%2020%203%205%203%205%202-1l-2-11%201%201c0%202%2018%2012%2023%2012%204%200%201-2-5-5-10-3-15-8-22-18-1-1-1-1-1%202m27%205c-2%201-1%202%202%204%203%201%204%202%203%203-2%204%205%207%208%204h3c3%201%203%201%203-1%200-1-9-7-18-11l-1%201m3%2043l-3%205c-4%206-5%2010-7%2021a170%20170%200%2001-5%2025l-1%202-2%2029-2%2031c-2%204-2%206-1%2012%201%207%201%2010-1%2016v3l2-3c3-2%207-4%207-2l-4%206c-6%206-6%208-3%2028%203%2024%208%2042%2016%2052a860%20860%200%200032%2033c-1-7%201-6%206%205%207%2012%2011%2016%2017%2018%209%203%209%203%2011%200%200-2%202-3%203-4%204-1%205%201%202%204-4%204-3%204%206%204%2016%200%2019-2%2032-20%209-11%2012-10%206%201-3%206-3%206%204%200l11-7c7-5%2028-28%2032-35%206-11%2014-29%2016-39%203-12%205-20%207-22l-1%2014v4l5-2%205-1-2-3c-6-8%203-12%2010-5l4%202%203-5%203-6%202-7c8-12%2010-27%204-39-3-8-4-8-6-5l-3%202%203%206c5%2012%204%2021-3%2027-10%209-11%2010-13%2010-1-1-1%200-1%202s-1%203-3%201v-8c1-8%201-8-1-14-3-7-3-10%201-17%204-8%2021-25%2026-26%204%200%204-1-1-3-4-2-4-2-9%201-7%204-22%2021-24%2028-1%207-4%209-8%205-2-2-2-3-2-15v-15c-6-11-6-10-5-23a567%20567%200%20001-34c0-13-1-16-6-21-2-3-4-4-4-3s-7%201-11-1c-10-4-30-6-63-8-40-3-53-3-55%200-1%201-1%201-2-1-1-3-3%200-3%205%200%203%206%2013%208%2013l1%201c0%203-13-1-17-5-3-4-5-10-3-13%201-3%200-5-3-5l-4-1c-2-1-2-1-4%202m4%2087l-3%202c-6%200-15%2011-10%2013l1%202h2c10-4%2012-4%2024-3%2018%201%2031%201%2032-1%202-2-1-7-7-9-4-2-6-2-14-3l-12-1h-13m107%200l-9%201c-11%200-19%202-20%204l-3%202c-3%200-4%206%200%206l3%202c3%201%2034%202%2043%200%206-1%208-1%2021%204%204%202%205%201%203-2l-1-2c2%200-3-7-9-11l-6-4h-22m-30%2019l1%202-1%201v1l1%202%202%201c1%200%201%201-1%202-6%204-6%209%200%205%203-2%205-1%203%202-2%202-3%207-2%207l3-3c4-4%209-8%2011-8s2%201%202%205v6l-5-1h-5l3%202c5%202%2033%202%2039%200l13-2c12-1%2013-2%203-4-6%200-8-1-10-3-4-3-10-5-18-7l-5-2h4c5%200%2013%203%2019%206%204%202%204%202%206%200%204-2%204-3%200-3-2%200-5%200-7-2-7-4-14-5-26-5-9%200-13-1-14-2-2-1-8-1-9%201h-1l-4-2c-2%200-3%200-2%201m-74%203l-8%204-8%203c-3%200-4%201%200%203%202%201%203%201%206-1%207-5%2013-6%2024-6l10-1c0-2-17-4-24-2m28%204c1%202%201%202-2%201h-23l-10%205c-4%202-8%204-11%204-6%202-6%203%201%203%204%200%207%200%2012%202%205%203%206%203%2021%203%2014%200%2021-1%2019-3l-4-1c-4%200-4%200-4-3%200-5%201-5%206%200%207%206%2010%205%204-2-2-3-2-4%201-1s5%200%202-4c-5-5-13-8-12-4m17%203c-3%202-4%2031-1%2035%201%201%202-1%202-17%201-20%201-19-1-18m-87%205c-3%209%201%2039%206%2043h1l1%202c1%202%201%200%201-7%200-11%200-11-3-16-4-6-6-13-5-21%201-6%200-6-1-1m69%2013c-4%202-14%203-22%202-9-2-14-2-16-1-3%201-2%202%203%202l10%202c10%203%2032-1%2032-5h-7m53%202l5%201%2011%202c8%202%2023%201%2029-1%206-3%205-3-7-2h-19c-12-2-19-2-19%200m-41%2028c-4%206-4%2013%200%2015%202%202%200%202-3%201l-5-2c-2%200-1-4%201-7%202-2%202-4%200-4s-6%205-7%208c0%203%204%208%2010%2011s9%204%209%202l4%202c6%206%2011%206%2016%202l3-2-7%201c-6%200-6%200-10-3l-6-4c-4-1-5-13-2-21%203-6%200-5-3%201m44%202l-1%201c-1-1-2%200-2%201h-1c0-2-4-1-5%201%200%203%200%203%204%202%203-1%203-1%205%201%201%203%200%206-2%206-5%200-21%206-21%208h5l5%201-3%201-1%201h7l1-4%201%201%204%202c4%200%2014-4%2011-5l-4%201h-2l1-1%204-8c0-2%201-1%206%202%2010%206%2024%2011%2030%2010%203%200%202-2%200-2l-3-1-9-3c-10-3-16-7-23-12-6-4-7-5-7-3m-61%205c-4%204-6%206-15%2011-10%206-12%209-12%2013%201%205%202%205%204%200%201-3%203-4%207-7%2011-6%2017-11%2019-18%201-3-1-2-3%201m85%2033c0%201-1%202-12%202a139%20139%200%2000-18%200c2-1%202-1%201-2-2-1-10%200-16%202h-9c-5-2-13-3-11-1%202%203%2015%204%2027%203l6-1-5%201c-7%203-18%202-29%200l-15-3-7-1c-1-1-2-1-5%201-4%203-5%205-1%204%202%200%208%204%2011%207l14%2010c15%209%2038%208%2053-3%2016-10%2020-13%2022-13%204%200%204-2-1-5s-5-3-5-1m-78%208c0%204%205%208%2010%208%202%200%202%200%201%201-2%201-2%201%202%203%207%204%2034%204%2043%200l5-4h-3c-2%201-12%202-13%201-2-1%201-2%205-2l5-2%206-1c4%200%2010-3%2010-5s-26%200-32%203h-17a358%20358%200%2000-22-2m17%2024l3%203c7%202%2030%201%2031-3h-34'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1,"src":"/static/2c4c167c05e10b4e6891182058715e8e/61fd6/jeff.png","srcSet":"/static/2c4c167c05e10b4e6891182058715e8e/69585/jeff.png 200w,\n/static/2c4c167c05e10b4e6891182058715e8e/61fd6/jeff.png 256w","sizes":"(max-width: 256px) 100vw, 256px"}}},"mdx":{"frontmatter":{"title":"PostgreSQL vs. SQLite: Benchmarking Write Speeds and  Large Queries (Part I: Making a Django Project)","createdAt":"2017-01-05T22:38:42.000Z","updatedAt":"2019-04-19T04:53:35.527Z","categories":["Programming","Python"],"images":[{"publicURL":"/static/cee36955cc6ab7add57b8d5879bfda0a/Screen_Shot_2016-12-22_at_2.33.47_PM.png","childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='536'%20viewBox='0%200%20400%20536'%20preserveAspectRatio='none'%3e%3cpath%20d='M34%2018c-4%205-2%2010%207%2013%205%202%206%203%203%206-2%202-2%202-5%201-6-2-7-2-7-1%200%205%2011%207%2016%203%204-5%202-10-6-13-6-2-7-4-4-6%202-2%202-2%206-1%204%203%206%201%204-2-3-3-11-3-14%200m82%203l-1%204-1-1c0-2-7-1-9%201s-2%203-2%208c0%207%202%209%2010%209l6-1V29l-1-13c-2%200-2%201-2%205m53-4l-1%204c0%204%200%204-1%203-2-2-7-1-10%202s-3%2011%200%2014c2%202%208%203%2010%201h1c2%203%203%200%203-12s0-14-2-12m85%200l-1%206v5h-13l-1-6c0-4-1-5-2-5l-1%2012%201%2012c1%200%202-1%202-5l1-5h13v5c0%204%201%205%202%205l1-12c0-11-1-16-2-12M54%2019l-1%202-1%202v3l1%207c0%206%202%209%206%209%202-1%202-3%200-3-3-1-3-10%200-12l1-3-1-1-2-2c0-2-1-3-3-2m12%205l-2%203h4c1-2%204-1%206%201%201%202%201%202-3%202-5%200-8%202-8%206s3%206%209%206l6-1v-7c0-7%200-8-2-9-3-2-8-2-10-1m20%200h-3v16l2%201c2%200%202%200%202-6%200-7%201-9%204-9%202%200%204%204%204%2010%200%204%201%207%203%206v-8c0-11-1-12-12-10m40%201c-3%202-1%204%203%202%202-1%205-1%205%201s-1%202-4%202c-4%200-7%202-7%206s4%206%209%206l6-1c2%200%201-13-1-16-3-3-9-3-11%200m201-1c-2%201-1%202%201%202s3%205%203%2011l1%204c2%200%202-1%202-7%201-7%202-9%205-8%202%201%202%202%202%208s0%207%202%207%202-14-1-16c-2-2-4-2-6%200h-4c-3-2-4-2-5-1m25%201c-8%206-3%2019%207%2016%205-1%205-3%200-2-4%200-5%200-6-2-1-3%201-4%206-4%205%201%207-1%205-4-1-5-8-8-12-4m23-1h-3c-2%200-2%200-2%207a390%20390%200%20011%2010c2%200%202-1%202-7%201-7%202-9%205-8%202%201%202%202%202%208s0%207%202%207l1-6%201-8-2-2c-3-2-6-3-7-1m-267%204c-4%203-2%2011%203%2011%204%200%207-8%203-11-2-2-4-2-6%200m52%200c-5%206%202%2015%207%209%202-2%201-7-1-9-2-3-5-2-6%200M31%2085l-1%202c0%202%203%202%2072%202%2071%200%2072-1%2072-2a1950%201950%200%2000-143-2m3%2059l-1%201a8624%208624%200%2000336-1H34m-4%20185v184l2%202%203%202h334l2-2%203-2V333l-1-184c-1-11-2%203-2%2074v77H33v-75c0-73%200-79-2-79l-1%20183m141-143v12c0%2011%200%2011%202%2012l6-1c6-4%2012-2%2012%204s-7%208-14%204c-6-3-9%203-3%207%204%203%2015%203%2019%200%206-4%208-9%206-15-2-8-11-11-19-8-2%201-2%201-2-3l1-4%207-1c10%200%2011-1%2011-3l-1-4h-25m-24%206c-5%204-5%208%200%2011l3%206c0%202-2%203-4%201h-2c-2%201%202%205%205%205l1%201h3l3-2%202-3c2-3%201-7-3-8-3-1-3-7%200-7%204%201%204-3%201-4l-3-2c0-2-3-1-6%202m72%2016l-1%2017c2%203%203%201%203-5%200-5%200-7%202-8%203-3%205-1%205%207%200%205%201%207%202%207s2-2%202-7l2-8c3-3%205%200%205%208%200%206%200%207%202%207s2-15-1-17c-1-2-5-2-7-1h-14m30%202c-8%2010%204%2022%2012%2013%206-6%202-16-6-16-3%200-4%201-6%203m-128%2032c-4%203-5%209-1%2011%203%201%205%205%204%207h-3c-3-2-5%200-3%202l3%202%202%202c2%201%202%201%206-1%206-4%206-9%201-12-4-3-4-7%200-7%204%201%203-2-1-5s-4-3-8%201m19%201c-8%209-3%2024%206%2022%2010-3%208-24-1-24l-5%202m25%200c-4%204-5%2014-2%2018%204%204%208%205%2012%201%203-2%203-3%203-8%200-11-7-16-13-11m20%200c-3%203-4%208-3%2014%202%2012%2016%2010%2016-3%200-11-8-17-13-11m15-1c0%202%203%203%206%203l4%201-5%2012c-2%206-2%206%200%206s3-3%206-10c6-13%206-13-3-13l-8%201m-58%204c-2%203-3%2010-1%2013%201%202%205%203%207%201%201-3%200-13-2-14-2-2-3-2-4%200m26%200c-4%205-3%2015%202%2015s6-9%202-15c-1-2-2-3-4%200m19%201c-4%205-2%2014%203%2014%204%200%206-10%202-15-2-3-2-3-5%201m35%201l-1%203-1%205-2%208c1%200%203-2%203-5l1-4%201-3%202-3%201%207c0%206%201%208%202%208%202%200%202-1%202-5%200-5%201-5%203-5%201%200%202%200%202%205%200%204%200%205%202%205s2-1%202-5c0-5-2-9-6-9-2%200-3%200-3-2%200-3-6-3-8%200m21%204c-3%203-3%208%200%2011%203%202%209%202%2011-1%205-7-5-16-11-10M33%20407l1%20106%20168%201c159%200%20166%200%20167-2%202-2%202-10%202-105V304l-169-1H33v104m67-58l-1%206c0%206%202%209%204%206%203-3%208%200%207%205-1%202-1%202-6%202h-5c0%204%2011%204%2013%201%204-6%200-12-6-12-3%200-3%200-3-3s0-3%205-3l4-1c0-2-11-3-12-1m30%201c-3%203-1%204%203%202%203-2%205%200%206%203%200%202-1%204-5%208l-6%207h14c1-1-1-2-5-2h-3l4-4c7-8%205-16-3-16l-5%202m25%2010c0%209%200%2011%202%2011l1-8v-7l2%204a365%20365%200%20005%2011c1%200%206-10%206-13l1-1%201%207c0%206%200%207%202%207l1-11c0-11%200-12-2-12l-3%202a88%2088%200%2001-4%2011c-1%204-2%203-4-2-2-8-4-11-6-11s-2%201-2%2012m26-11v12l1%2010h6c7%200%2010-3%208-8v-6c2-6%200-8-8-9l-7%201m88-1v22l1-2c0-5%201-6%205-6%207%200%2010-8%204-12-2-2-10-3-10-2m18%2010c0%2010%202%2013%208%2013s8-4%208-14l-1-8-1%207c0%209-2%2013-6%2013-5%200-6-2-6-12l-1-8-1%209M94%20398c-3%202-1%204%203%202%203-2%205%200%206%203%200%202-1%204-6%209l-5%206c1%202%2015%201%2015%200l-5-2h-4l4-5c5-5%206-8%203-12-2-3-9-4-11-1m20%200c-4%204-4%2015%200%2019%202%203%207%203%2010-1%204-3%204-14%200-17-3-3-8-4-10-1m28%201c-7%207-2%2020%207%2020%206%200%209-3%209-8%200-3-1-3-5-4l-5%201c0%202%201%202%203%202%203%200%205%202%203%205-2%202-7%201-10-1-6-7%202-19%209-13%203%201%204%201%204-1%200-5-10-6-15-1m20%209v11h6c5%200%206%200%208-2%202-3%203-7%201-7l-1-2%201-3c1%200%201-3-1-6-1-3-1-3-8-3h-6v12m31-11c-5%204-4%209%203%2011%203%201%205%203%205%204%202%204-3%206-8%204-4-2-5-1-1%201%203%203%207%202%2010%200%204-4%202-7-5-11-5-2-6-4-3-6%202-2%203-2%206-1%203%202%204%200%201-1-2-2-6-2-8-1m18%201c-4%204-2%208%204%2010%206%203%207%205%204%207-1%202-2%202-9%200-2%200-2%200-1%201%204%205%2014%202%2014-3%200-2-3-6-6-6l-4-2c-2-2-2-2-1-4%201-3%205-4%207-2l2%201v-2c-3-3-8-3-10%200m17%209l1%2012%204-1c16%200%2015-22-1-22h-4v11m2-8v10l1%208%204-1c8%200%2011-10%204-16-3-2-8-3-9-1m-114%202c-4%205-2%2015%203%2015%203%200%204-2%204-8%200-9-4-12-7-7m-15%2044c-8%205-6%2022%204%2022%208%200%2011-15%204-21-3-3-5-4-8-1m18%201c-6%207-3%2021%205%2021s11-16%204-22c-3-3-6-2-9%201m20%200c-7%206-4%2021%204%2021s11-14%205-21c-3-4-6-4-9%200m30-1c-7%204-8%2014-2%2019%207%206%2017%202%2015-6%200-3%200-3-5-3-5%201-6%202-1%203%205%200%204%206-2%206-8%200-11-11-4-16%203-2%203-2%207%200s6%200%203-2c-3-3-8-3-11-1m18-1c-2%200-1%2022%201%2022%207%203%2018-3%2014-8-2-1-2-2-1-5%202-4%200-9-3-9h-11m-100%203c-3%204-3%205%200%204%202%200%202%200%202%207s0%208%202%208c2-1%202-21%200-22l-4%203m16%200c-5%204-3%2017%202%2017%204%200%206-12%202-16-2-2-2-2-4-1m18%202c-4%205-2%2015%203%2015%204%200%206-12%202-16-2-3-2-3-5%201m20-1c-4%204-2%2016%202%2016%205%200%207-10%203-15-3-4-3-4-5-1'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":0.7457627118644068,"src":"/static/cee36955cc6ab7add57b8d5879bfda0a/164ea/Screen_Shot_2016-12-22_at_2.33.47_PM.png","srcSet":"/static/cee36955cc6ab7add57b8d5879bfda0a/164ea/Screen_Shot_2016-12-22_at_2.33.47_PM.png 176w","sizes":"(max-width: 176px) 100vw, 176px"}}}]},"fields":{"githubLink":"https://github.com/jeffwillette/jeffwillette.github.io.src/tree/dev/data/blog/postgresql-vs-sqlite-benchmarking-write-speeds-and-large-queries-part-i-making-a-django-project/index.mdx"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"PostgreSQL vs. SQLite: Benchmarking Write Speeds and  Large Queries (Part I: Making a Django Project)\",\n  \"published\": true,\n  \"createdAt\": \"2017-01-05T22:38:42.000Z\",\n  \"updatedAt\": \"2019-04-19T04:53:35.527Z\",\n  \"images\": [\"./Screen_Shot_2016-12-22_at_2.33.47_PM.png\"],\n  \"categories\": [\"Programming\", \"Python\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I had trouble with a database query taking up a critical amount memory on a server than I run. At \", mdx(\"del\", {\n    parentName: \"p\"\n  }, \"deprecated site\"), \"\\nusers can select how many points to plot on a map out of a database of ~70,000 data points. The database happens to\\nbe SQLite and I was wondering if I could squeeze any performance from just switching databases rather than upgrading\\nthe box or refactoring the code.\"), mdx(\"p\", null, \"I wanted to see if switching to PostgreSQL would lighten the load on memory. I started the site on SQLite since there\\nwould only be occasional writes by one user. according to the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://sqlite.org/whentouse.html\"\n  }), \"SQLite\"), \" website,\\nregarding when to use SQLite, my application fit perfectly within their guidelines. It would be well less than a TB\\nof disk space and it would only have one user writing occasionally and a modest amount of readers.\"), mdx(\"p\", null, \"I am sure my method is far from perfect but I wanted to get a feel for how the two different databases performed,\\nnonetheless.\"), mdx(\"h2\", null, \"Creating A Django Project to Work With\"), mdx(props.imgs.Img1, {\n    width: \"20%\",\n    align: \"left\"\n  }), mdx(\"p\", null, \"I created a Django project that has a simple \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"REST API\"), \" for creating, retrieving and destroying data. I made the\\nmodel structure reasonable close to what I used in production and my goal is to get the total time elapsed for\\nrequests as well as memory usage information from graphite.\"), mdx(\"p\", null, \"I have a server that I had setup with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/graphite-project/graphite-web\"\n  }), \"graphite\"), \" which I cloned,\\nand removed all that was unnecessary. I was left with the smallest Digital Ocean droplet with these specs.\"), mdx(\"p\", null, \"I set up Django to serve directly through gunicorn without going through NGINX or any other reverse proxy server. So\\nonce I verified that the Django project and graphite were running and collecting stats from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"collectd\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"statsd\"), \",\\nI was ready to go.\"), mdx(\"p\", null, \"I made a separate app for \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"PostgreSQL\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"SQLite\"), \" but they both use basically the same model structure which is\\nposted below. It has a method to populate three \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CharField\"), \"s of length 50 with random letters and numbers.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"from __future__ import unicode_literals\\nimport random\\nimport string\\nfrom django.db import models\\n\\n# Create your models here.\\nclass SqliteData(models.Model):\\n    \\\"\\\"\\\"A model with random strings to simulate sqlite data\\\"\\\"\\\"\\n\\n    field_1 = models.CharField(max_length=50)\\n    field_2 = models.CharField(max_length=50)\\n    field_3 = models.CharField(max_length=50)\\n\\n    def populate_data(self):\\n        \\\"\\\"\\\"Fills the model with random strings as data\\\"\\\"\\\"\\n        random_string = ''.join(random.choice(string.ascii_uppercase + string.ascii_lowercase + string.digits) for _ in range(150))\\n        field_1, field_2, field_3 = random_string[0:50], random_string[50:100], random_string[100:]\\n        self.save()\\n\\n\")), mdx(\"p\", null, \"The views are fairly straightforward, they time how long it takes to process the data and return a plain\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HttpResponse\"), \" with the elapsed time in the view code block.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"def create_data(request, n):\\n  \\\"\\\"\\\"Renders a template to run the benchmark test on psql\\\"\\\"\\\"\\n  start = timer()\\n  for i in range(int(n)):\\n    obj = PsqlData()\\n    obj.populate_data()\\n  end   = timer()\\n  return HttpResponse(end - start)\\n\")), mdx(\"p\", null, \"The retrieve data view serializes the queryset into JSON and then returns that as a JSON object as well. I did this\\nto force the query to be evaluated since Django\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.djangoproject.com/en/1.10/topics/db/queries/#querysets-are-lazy\"\n  }), \"querysets are lazy\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"def retrieve_data(request):\\n  \\\"\\\"\\\"Retrieve all of the objects that are in the database\\\"\\\"\\\"\\n  start = timer()\\n  objs = PsqlData.objects.using('postgresql').all()\\n  data = {}\\n  for i, obj in enumerate(objs):\\n    data[i] = [obj.field_1, obj.field_2, obj.field_3]\\n  json = JsonResponse(data)\\n  end = timer()\\n  return HttpResponse('%s<script>var data = %s</script>' % (end - start, json.content))\\n\")), mdx(\"p\", null, \"The destroy view destroys all the objects in the database and times how long that operation takes.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"def destroy_data(request):\\n  \\\"\\\"\\\"Destroy all the data objects in the database\\\"\\\"\\\"\\n  start = timer()\\n  objs = PsqlData.objects.using('postgresql').all()\\n  for obj in objs:\\n    obj.delete()\\n  end = timer()\\n  return HttpResponse(end - start)\\n\")), mdx(\"p\", null, \"After testing to make sure that everything works as I expected it to, I just needed to write a python script to\\nactually run the test on the server and log the results.\"), mdx(\"p\", null, \"This logs the start time from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"datetime\"), \" module and also logs the finish time when writing the log. I also get\\nthe time elapsed in the view (which is sent from the Django view). So once I crunch the data I should be able to see\\nthe amount of time that is lost in the network and actually returning the values in the from the view, which will\\nprobably be significant in the retrieve view.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"import time\\nimport requests\\nfrom datetime import datetime\\n\\napi_server = 'http://my.server.ip.addy:8500'\\npsql = '/psql'\\nsqlite = '/sqlite'\\ncreate = '/create'\\nretrieve = '/retrieve'\\ndestroy = '/destroy'\\n\\ndef hit_api(server, db, operation, n=0):\\n  \\\"\\\"\\\"request API endpoint to create n objects\\\"\\\"\\\"\\n  # Getting the time right before the request is initiated. Time is meant for a reference when\\n  # looking at the graphite graphs of the server\\n  time = datetime.now()\\n  if n == 0:\\n    # Changing n to 'all' so I can reference it when writing the output. Retrieve and Destroy\\n    # work on 'all' data in the database\\n    n = 'all'\\n    response = requests.get('%s%s%s' % (server, db, operation))\\n  else:\\n    response = requests.get('%s%s%s/%s' % (server, db, operation, n))\\n\\n  with open('/Users/Jeff/Development/benchmark-%s.txt' % db[1:], 'a+') as f:\\n    # logging the operation...on...start_time...elapsed time returned by response\\n    f.write('%s: %s -- started: %s - finished: %s -- %s\\\\n' \\\\\\n        % (operation[1:], n, time, datetime.now(), response.content.split(\\\"<script>\\\")[0]))\\n\\ndef main():\\n  \\\"\\\"\\\"The main function which will run and log all the operations\\\"\\\"\\\"\\n  amounts = [500, 1000, 2000, 4000, 8000, 16000, 32000, 64000, 128000]\\n  for num in amounts:\\n    # Doing all operations for num in sqlite\\n    hit_api(api_server, sqlite, create, num)\\n    hit_api(api_server, sqlite, retrieve)\\n    hit_api(api_server, sqlite, destroy)\\n    time.sleep(60)\\n    # Doing all operations for num in psql\\n    hit_api(api_server, psql, create, num)\\n    hit_api(api_server, psql, retrieve)\\n    hit_api(api_server, psql, destroy)\\n    time.sleep(60)\\n\\nif __name__ == \\\"__main__\\\":\\n  main()\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","timeToRead":2,"tableOfContents":{"items":[{"url":"#creating-a-django-project-to-work-with","title":"Creating A Django Project to Work With"}]},"excerpt":"I had trouble with a database query taking up a critical amount memory on a server than I run. At  deprecated site \nusers can select how…"}},"pageContext":{"id":"d8859646-b959-5b1b-9083-bba2234418bf"}}}