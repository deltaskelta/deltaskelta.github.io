{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/uc-san-diego-algorithms/algorithms-on-strings/genome-sequencing-pattern-matching/","result":{"data":{"site":{"siteMetadata":{"author":"Jeff Willette"}},"authorAvatar":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='400'%20viewBox='0%200%20400%20400'%20preserveAspectRatio='none'%3e%3cpath%20d='M154%2018l-12%202c-4%202-38%203-47%201-13-3-20-1-13%202%205%202%2010%207%2010%209l1%207%201%205c-2%200-5-4-8-8l-2-4-1%203%201%205%201%203c-1%200-2-1-2-3-3-7-5%200-5%2015-1%2014%205%2024%2016%2026l6%202-5%2013c-11%2025-12%2031-15%2071v11h-3c-6%201-7%206-6%2017v17c-3%2024%201%2049%2011%2059%203%203%204%205%205%2010%206%2032%2010%2038%2037%2067%2015%2016%2017%2018%2017%2021%200%204-7%2018-10%2020-7%205-14%208-26%2010a271%20271%200%200047-1l-3-1-2-21%205%204%206%204v1c-1%200%207%206%209%206v1c-2%203-1%207%203%208%203%200%204-1%202-2l-1-2%202%201%209%201%208%201c1%202%2018%201%2018%200l-1-2-1-4-1-4-1-1c1-2%200-2-2-1-5%201-3-1%204-4l20-14%207-5%2013-12c8-7%208-7%208-4a587%20587%200%2000-4%2030c1%205-5%2012-14%2019l-3%203h43c23%200%2042%200%2041-1l-15-4-21-7-7-3c-5-2-7-3-11-9l-5-7c-1%200-1-11%201-24%201-6%202-8%205-12%2010-10%2020-30%2023-45%202-7%203-8%209-8%2019-3%2025-8%2031-28%206-16%207-25%207-43%200-19-1-24-8-28-3-2-4-2-8-1s-4%201-6-1c-3-4-7-49-5-58%202-11-2-25-10-35-4-5-5-7-3-11%203-3%202-7-2-12l-4-5c0-2-7-13-12-18s-15-11-18-11l-2-1c0-1-11-3-26-4-20-1-31-3-34-4l-27-4-15%202m-9%208l33%206c6%200%208%201%208%202l-2%202c-3%201-2%201%204%203l8%202c-1-3%203-2%2010%202l7%203-10-7-7-5c-1-2-14-5-27-5-5%200-7%200-8-2l-10-2c-6%200-8%200-6%201m-30%202l23%206c2%201%203%201%203%203-1%202%200%203%2010%204%208%200%209-1%201-3-5-1-5-3-1-3l-8-2a323%20323%200%2001-28-5M80%2047c0%206%202%2015%204%2020%203%205%203%205%202-1l-2-11%201%201c0%202%2018%2012%2023%2012%204%200%201-2-5-5-10-3-15-8-22-18-1-1-1-1-1%202m27%205c-2%201-1%202%202%204%203%201%204%202%203%203-2%204%205%207%208%204h3c3%201%203%201%203-1%200-1-9-7-18-11l-1%201m3%2043l-3%205c-4%206-5%2010-7%2021a170%20170%200%2001-5%2025l-1%202-2%2029-2%2031c-2%204-2%206-1%2012%201%207%201%2010-1%2016v3l2-3c3-2%207-4%207-2l-4%206c-6%206-6%208-3%2028%203%2024%208%2042%2016%2052a860%20860%200%200032%2033c-1-7%201-6%206%205%207%2012%2011%2016%2017%2018%209%203%209%203%2011%200%200-2%202-3%203-4%204-1%205%201%202%204-4%204-3%204%206%204%2016%200%2019-2%2032-20%209-11%2012-10%206%201-3%206-3%206%204%200l11-7c7-5%2028-28%2032-35%206-11%2014-29%2016-39%203-12%205-20%207-22l-1%2014v4l5-2%205-1-2-3c-6-8%203-12%2010-5l4%202%203-5%203-6%202-7c8-12%2010-27%204-39-3-8-4-8-6-5l-3%202%203%206c5%2012%204%2021-3%2027-10%209-11%2010-13%2010-1-1-1%200-1%202s-1%203-3%201v-8c1-8%201-8-1-14-3-7-3-10%201-17%204-8%2021-25%2026-26%204%200%204-1-1-3-4-2-4-2-9%201-7%204-22%2021-24%2028-1%207-4%209-8%205-2-2-2-3-2-15v-15c-6-11-6-10-5-23a567%20567%200%20001-34c0-13-1-16-6-21-2-3-4-4-4-3s-7%201-11-1c-10-4-30-6-63-8-40-3-53-3-55%200-1%201-1%201-2-1-1-3-3%200-3%205%200%203%206%2013%208%2013l1%201c0%203-13-1-17-5-3-4-5-10-3-13%201-3%200-5-3-5l-4-1c-2-1-2-1-4%202m4%2087l-3%202c-6%200-15%2011-10%2013l1%202h2c10-4%2012-4%2024-3%2018%201%2031%201%2032-1%202-2-1-7-7-9-4-2-6-2-14-3l-12-1h-13m107%200l-9%201c-11%200-19%202-20%204l-3%202c-3%200-4%206%200%206l3%202c3%201%2034%202%2043%200%206-1%208-1%2021%204%204%202%205%201%203-2l-1-2c2%200-3-7-9-11l-6-4h-22m-30%2019l1%202-1%201v1l1%202%202%201c1%200%201%201-1%202-6%204-6%209%200%205%203-2%205-1%203%202-2%202-3%207-2%207l3-3c4-4%209-8%2011-8s2%201%202%205v6l-5-1h-5l3%202c5%202%2033%202%2039%200l13-2c12-1%2013-2%203-4-6%200-8-1-10-3-4-3-10-5-18-7l-5-2h4c5%200%2013%203%2019%206%204%202%204%202%206%200%204-2%204-3%200-3-2%200-5%200-7-2-7-4-14-5-26-5-9%200-13-1-14-2-2-1-8-1-9%201h-1l-4-2c-2%200-3%200-2%201m-74%203l-8%204-8%203c-3%200-4%201%200%203%202%201%203%201%206-1%207-5%2013-6%2024-6l10-1c0-2-17-4-24-2m28%204c1%202%201%202-2%201h-23l-10%205c-4%202-8%204-11%204-6%202-6%203%201%203%204%200%207%200%2012%202%205%203%206%203%2021%203%2014%200%2021-1%2019-3l-4-1c-4%200-4%200-4-3%200-5%201-5%206%200%207%206%2010%205%204-2-2-3-2-4%201-1s5%200%202-4c-5-5-13-8-12-4m17%203c-3%202-4%2031-1%2035%201%201%202-1%202-17%201-20%201-19-1-18m-87%205c-3%209%201%2039%206%2043h1l1%202c1%202%201%200%201-7%200-11%200-11-3-16-4-6-6-13-5-21%201-6%200-6-1-1m69%2013c-4%202-14%203-22%202-9-2-14-2-16-1-3%201-2%202%203%202l10%202c10%203%2032-1%2032-5h-7m53%202l5%201%2011%202c8%202%2023%201%2029-1%206-3%205-3-7-2h-19c-12-2-19-2-19%200m-41%2028c-4%206-4%2013%200%2015%202%202%200%202-3%201l-5-2c-2%200-1-4%201-7%202-2%202-4%200-4s-6%205-7%208c0%203%204%208%2010%2011s9%204%209%202l4%202c6%206%2011%206%2016%202l3-2-7%201c-6%200-6%200-10-3l-6-4c-4-1-5-13-2-21%203-6%200-5-3%201m44%202l-1%201c-1-1-2%200-2%201h-1c0-2-4-1-5%201%200%203%200%203%204%202%203-1%203-1%205%201%201%203%200%206-2%206-5%200-21%206-21%208h5l5%201-3%201-1%201h7l1-4%201%201%204%202c4%200%2014-4%2011-5l-4%201h-2l1-1%204-8c0-2%201-1%206%202%2010%206%2024%2011%2030%2010%203%200%202-2%200-2l-3-1-9-3c-10-3-16-7-23-12-6-4-7-5-7-3m-61%205c-4%204-6%206-15%2011-10%206-12%209-12%2013%201%205%202%205%204%200%201-3%203-4%207-7%2011-6%2017-11%2019-18%201-3-1-2-3%201m85%2033c0%201-1%202-12%202a139%20139%200%2000-18%200c2-1%202-1%201-2-2-1-10%200-16%202h-9c-5-2-13-3-11-1%202%203%2015%204%2027%203l6-1-5%201c-7%203-18%202-29%200l-15-3-7-1c-1-1-2-1-5%201-4%203-5%205-1%204%202%200%208%204%2011%207l14%2010c15%209%2038%208%2053-3%2016-10%2020-13%2022-13%204%200%204-2-1-5s-5-3-5-1m-78%208c0%204%205%208%2010%208%202%200%202%200%201%201-2%201-2%201%202%203%207%204%2034%204%2043%200l5-4h-3c-2%201-12%202-13%201-2-1%201-2%205-2l5-2%206-1c4%200%2010-3%2010-5s-26%200-32%203h-17a358%20358%200%2000-22-2m17%2024l3%203c7%202%2030%201%2031-3h-34'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1,"src":"/static/2c4c167c05e10b4e6891182058715e8e/61fd6/jeff.png","srcSet":"/static/2c4c167c05e10b4e6891182058715e8e/69585/jeff.png 200w,\n/static/2c4c167c05e10b4e6891182058715e8e/61fd6/jeff.png 256w","sizes":"(max-width: 256px) 100vw, 256px"}}},"mdx":{"frontmatter":{"title":"Genome Sequencing and Pattern Matching","createdAt":"2019-05-07T00:59:25.732Z","updatedAt":"2019-07-21T21:55:42.527Z","categories":["Programming","Algorithms","UC San Diego","String Algorithms"],"images":[{"publicURL":"/static/e1cf032c51926b84848b69922302030e/trie-matching.png","childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='509'%20viewBox='0%200%20400%20509'%20preserveAspectRatio='none'%3e%3cpath%20d='M219%2016c-14%208-13%2025%200%2032%2020%2010%2037-18%2019-31-5-4-15-4-19-1m2%202c-10%204-12%2020-3%2026%2013%209%2030-6%2022-20-3-5-13-9-19-6m155%2097c-8%206-6%2018%203%2021%207%202%2015-4%2015-12s-12-14-18-9m-270%201c-9%204-9%2017%200%2021%2014%205%2023-14%209-21-5-2-5-2-9%200m90-1c-8%205-9%2012-4%2018%209%2010%2024%200%2019-12-2-5-11-8-15-6m79%201a11%2011%200%201014%2018c9-10-2-25-14-18m104%201c-8%204-6%2016%203%2016%205%200%208-3%208-9s-7-10-11-7m-182%201c-8%204-5%2016%204%2016%204%200%207-3%207-8%200-6-6-11-11-8m81%200c-6%202-7%2010-2%2014s13%201%2013-6c0-6-5-10-11-8m-173%202c-4%203-4%208%200%2012s7%204%2011%200c8-7-2-19-11-12m275%2047c-9%201-12%2013-5%2019%205%206%209%205%2015%200%208-8%202-21-10-19m-184%201c-11%205-8%2023%205%2023%2012%200%2015-18%203-23h-8m-112%202c-9%204-8%2017%201%2021%207%202%2014-2%2016-9%201-9-9-17-17-12m195-1c-7%202-11%208-9%2015%202%205%206%208%2011%208%2013%200%2016-18%204-23h-6m100%202c-8%204-6%2015%203%2015%206%200%208-2%208-8%200-4-1-5-4-7-4-2-4-2-7%200m-295%203c-6%205-3%2014%205%2014%205%200%208-3%208-8%200-8-7-11-13-6m112-2c-5%204-5%209-1%2013%205%206%2015%201%2014-7-1-6-9-9-13-6m81%201c-8%206-3%2018%206%2015%206-1%208-9%204-14-4-3-6-3-10-1M41%20231c-10%205-9%2019%202%2023%209%203%2018-10%2012-18-4-5-8-7-14-5m336%200c-11%206-7%2022%205%2022%205%200%2010-4%2012-8%202-10-9-18-17-14m-291%201l-5%204c-10%2011%206%2026%2016%2015%208-8%201-22-11-19m110%200l-5%204c-6%2010%204%2023%2015%2017%2013-7%204-26-10-21m78%203c-6%205-6%2013%200%2017%205%205%2014%203%2017-3%206-11-8-23-17-14m54%200c-5%204-6%208-3%2013%205%2011%2019%209%2021-2%202-10-10-18-18-11m-198%202c-3%203-4%205-4%207%200%2011%2012%2016%2020%208%2010-11-5-26-16-15m249-3c-8%203-6%2016%203%2016%2010%200%2011-15%201-16h-4m-339%202c-3%203-4%208-1%2012%207%208%2020-3%2013-11-3-4-9-4-12-1m156%200c-8%206-1%2018%208%2014%208-3%205-16-3-16l-5%202m-113%201c-5%206-1%2015%206%2015s11-10%205-15c-3-3-7-3-11%200m194-1c-5%202-6%2010-2%2014%203%203%209%203%2011%200%207-7%201-18-9-14m54%200c-7%203-5%2016%203%2016%205%200%209-3%209-8%200-6-6-10-12-8m-197%201c-8%204-5%2016%203%2016s12-9%206-14c-3-3-5-4-9-2m60%2051c-6%205-7%2012-2%2017%209%2010%2025-1%2019-13-4-6-12-8-17-4m138-1c-9%204-11%2014-5%2020%205%204%2011%204%2016%200%206-7%204-16-5-20h-6m-200%203c-6%203-8%2010-4%2016%205%207%2013%207%2018%201%208-10-3-24-14-17m64%200c-6%206-5%2013%202%2015%208%203%2014-6%209-13-2-3-9-4-11-2m133%203c-3%203-3%206-2%209%205%208%2016%206%2016-3%200-8-9-12-14-6m-195-1c-3%202-5%206-5%209%203%209%2015%209%2017%200%201-6-6-12-12-9m120%200c-7%204-6%2017%202%2020%205%203%208%202%2013-2%209-10-3-24-15-18m-213%203c-10%204-9%2017%201%2021%205%202%209%201%2013-4%207-8-3-22-14-17m213%201c-5%206-1%2014%207%2014%203%200%204-1%206-3%206-8-5-18-13-11m-214%204c-7%207%201%2017%2010%2013%203-2%205-7%204-10-3-6-9-8-14-3m94%2049c-9%203-11%2017-2%2021%2011%206%2022-7%2014-17-3-4-7-5-12-4m61%202c-11%207-7%2022%206%2021%209%200%2014-11%209-17-4-6-10-7-15-4m62%200c-11%205-11%2019%200%2023%207%202%2015-4%2015-12%200-6-9-13-15-11m-125%203c-6%205-2%2014%205%2014%205%200%208-3%208-8%200-7-7-11-13-6m62%201c-2%203-2%2010%201%2012%205%205%2013%201%2013-6%200-5-2-8-7-8l-7%202m-152%200c-11%204-11%2017-1%2022%205%202%2010%201%2014-4%207-8-3-21-13-18m215%200c-5%202-7%209-3%2014%208%207%2020-4%2013-11-3-3-7-4-10-3m-217%205c-4%204-4%208%200%2012s7%204%2011%200c8-8-3-19-11-12m92%2044c-5%202-8%2011-4%2017%204%207%2016%207%2019-1%206-10-4-20-15-16m63%202c-6%203-8%2011-3%2017s15%205%2018-2c6-10-5-21-15-15m61%201c-13%206-5%2026%208%2021%2010-4%2011-17%201-22-4-1-6-1-9%201m-124%201c-6%205-1%2016%206%2015%205-1%207-4%207-9%200-7-7-10-13-6m63%202c-7%207%201%2017%2010%2013%207-4%203-16-4-16l-6%203m-154%200c-9%204-10%2016-1%2021%2011%205%2023-9%2014-18-4-4-8-5-13-3m216-1c-2%201-5%205-5%208%200%208%2011%2012%2015%204%205-6-2-15-10-12m-217%206c-3%202-3%203-3%206%202%2010%2015%2011%2017%201%201-8-8-12-14-7m94%2044c-8%203-11%2013-5%2019%209%2010%2025-2%2018-14-2-4-8-6-13-5m120%203c-12%208-2%2026%2011%2020%207-3%209-10%205-16-5-6-10-8-16-4m-122%202c-2%201-4%206-2%2010%203%208%2015%205%2015-3%200-7-7-11-13-7m122%202c-5%205-1%2014%206%2014%203%200%204-1%206-3%204-4%204-5%201-10-3-4-9-4-13-1'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":0.7874015748031497,"src":"/static/e1cf032c51926b84848b69922302030e/ca650/trie-matching.png","srcSet":"/static/e1cf032c51926b84848b69922302030e/69585/trie-matching.png 200w,\n/static/e1cf032c51926b84848b69922302030e/ca650/trie-matching.png 235w","sizes":"(max-width: 235px) 100vw, 235px"}}},{"publicURL":"/static/9c1b5b49847f229afe5459d860fd5b26/suffix-trie.png","childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='303'%20viewBox='0%200%20400%20303'%20preserveAspectRatio='none'%3e%3cpath%20d='M137%202c-7%205-6%2013%201%2016%204%202%205%202%207%200%207-4%208-9%203-15-4-4-8-4-11-1m261%2096v98l-4%206c-6%209-10%2023-12%2043-1%209-5%2035-10%2056%200%202%200%202%2014%202h14V152a4353%204353%200%2000-2-54M136%204c-3%203-3%207%200%2010%203%204%208%204%2011%201%206-7-4-17-11-11M81%2024c-3%202-2%205%200%207%203%203%207%202%209-1%203-6-5-11-9-6m124%205l-2%204c0%202%204%206%207%206%202%200%205-4%205-6l-2-4-4-2-4%202m96%202c-3%203-3%206-1%208%203%204%205%204%208%201%205-5-2-13-7-9m-180%208c-6%202-5%2011%202%2011%205%200%207-7%203-10-3-2-3-2-5-1m122%202c-2%202-3%204%200%207%201%203%206%203%208%200%205-5-3-12-8-7M95%2052l-2%204c0%202%205%206%207%206l2-1%203-6c0-2-4-5-6-5l-4%202m122%202c-4%203-1%209%205%209l4-3c3-6-5-11-9-6M24%2055c-2%203-1%206%203%209s11-5%206-9c-2-3-7-2-9%200m257%201c-4%202-3%209%202%2011%205%201%209-6%205-10-2-2-3-2-7-1M55%2065c-4%204-1%2010%204%2010%203%200%206-3%206-6l-2-4-4-2-4%202m76%202c-5%205%202%2013%207%209%203-3%203-6%201-8-3-4-5-4-8-1m109%202l-2%204c0%202%204%206%206%206s6-4%206-6c0-3-4-6-6-6l-4%202m98%201c-3%203-1%209%204%209%203%200%206-3%206-6%200-4-7-7-10-3m-226%201c-6%202-4%2011%202%2011%202%200%206-3%206-6%200-1-4-6-6-6l-2%201m187%202c-2%201-3%205-2%207%202%204%208%205%2010%201%203-5-3-10-8-8m-113%203c-5%203%200%2012%206%2010%204-2%204-9-1-11-3-1-2-1-5%201M25%2078l-2%204c0%202%204%206%206%206%206%200%208-7%204-10-3-3-5-2-8%200m135%200c-2%201-3%206%200%208%204%205%2012-2%208-7-2-3-5-3-8-1M55%2085c-4%202-2%208%203%209%205%202%209-7%204-10-2-1-4-1-7%201m244%209c-4%203-3%209%202%2010%203%201%207-3%207-5%200-3-1-4-4-6-2-1-2-1-5%201M27%2097c-6%203-4%2011%203%2011%202%200%205-3%205-6%200-4-5-7-8-5m133%201c-3%202-3%207%200%209s5%201%207-1c5-5-1-12-7-8m-76%201l-2%204c0%206%209%207%2011%202%202-6-5-11-9-6m52%201c-3%203-1%2010%204%2010%202%200%206-4%206-6%200-3-4-6-6-6l-4%202m79%200l-2%204c0%201%204%206%206%206s6-4%206-6c0-3-3-6-6-6l-4%202m26%200l-2%204%202%204c4%204%2010%201%2010-4%200-2-4-6-6-6l-4%202m25-1c-2%201-3%205-2%207%203%206%2011%204%2011-3%200-3-5-6-9-4m-156%202c-6%204%201%2012%207%209%203-2%203-7%200-9-2-2-4-2-7%200m-54%203c-4%202-3%209%201%2011%206%201%2010-6%206-10-3-2-4-2-7-1m129%202c-3%204-3%205%200%208s5%203%208%200%201-10-4-10l-4%202m114%209c-4%203-2%2011%204%2011%202%200%205-4%205-6%200-4-5-7-9-5m-272%202c-7%204-2%2014%205%2011l3-3c1-5-3-10-8-8m58%200c-2%201-4%205-3%208%201%202%205%204%208%203%206-3%202-13-5-11m76%200c-5%203-4%209%201%2011s9-6%205-9c-3-3-4-3-6-2m-25%202c-4%202-2%2010%203%2010%203%200%206-4%206-6s-3-6-5-6l-4%202m129%200c-3%203-1%2010%204%2010%202%200%206-4%206-6%200-3-4-6-6-6l-4%202m-50%201c-3%202-2%206%201%208%205%204%2011-2%208-8-2-3-7-3-9%200m28-1c-5%203-5%207-2%209%203%203%206%202%208%200%203-3%203-5%200-8-3-2-4-2-6-1m-133%202c-5%203%200%2012%206%209%203-2%204-7%201-9s-4-2-7%200m-54%204c-4%203-4%205-1%208s10%201%2010-4c0-1-4-6-6-6l-3%202m131%200c-5%202-4%209%201%2011%204%201%208-3%207-7-1-3-5-5-8-4m113%209c-5%203-4%2010%201%2011%206%200%209-6%205-9-3-3-4-3-6-2m-273%204c-6%205-1%2013%205%2010%204-3%204-8-1-11-1-1-3%200-4%201m57%201c-3%202-2%206%200%208%205%205%2012-2%208-7-2-3-6-4-8-1m76-1c-3%202-3%208%200%2010%206%203%2012-5%207-9-2-2-5-2-7-1m55%202c-3%203-2%207%201%209%204%202%209-1%209-5l-2-4-4-2-4%202m27%200c-4%201-4%206-1%208%204%204%209%202%209-3s-4-8-8-5m-132%200c-3%203-3%206-1%208%202%203%206%204%208%201%205-5-1-12-7-9m-54%205c-4%203-4%206%200%209%202%202%205%202%208-1%202-3%201-5-1-8-3-3-4-3-7%200m131%200c-4%202-5%208%200%2011%202%202%207%200%208-4s-4-9-8-7m113%209c-5%202-4%2010%201%2011%205%202%209-6%205-9-3-3-3-3-6-2m-274%205c-5%205%200%2012%206%209l3-4c0-6-6-9-9-5m58%200c-5%203%200%2012%206%209%203-2%204-6%201-9-2-2-4-3-7%200m76%200c-4%204-1%2010%204%2010%202%200%205-4%205-6%200-5-6-8-9-4m82-1c-6%203-4%2011%202%2011%205%200%208-6%204-9-3-3-4-3-6-2m-132%202c-3%202-4%206-1%208%205%205%2012%200%209-6-2-4-5-4-8-2m105%200l-2%204%202%204%204%202%204-2%202-4-2-4-4-2-4%202m-161%206c-2%204-1%206%202%208%205%204%2011-2%208-8-3-3-7-3-10%200m132%200c-2%201-3%205-2%207%203%206%2011%204%2011-3%200-4-6-6-9-4m112%2010l-2%204c0%201%204%206%206%206s6-4%206-6c0-3-3-6-6-6l-4%202m-273%203c-3%203-3%205%200%208s5%203%208%200c4-4%201-10-4-10l-4%202m59%200c-4%203-1%2010%204%2010%202%200%205-3%205-6s-3-6-5-6l-4%202m76%200c-3%201-3%206%200%208%205%205%2012-3%207-8-2-2-4-3-7%200m55%201c-3%203-2%207%202%209%206%203%2011-4%206-9l-4-2-4%202m-160%206l-2%204c0%202%204%206%206%206s6-4%206-6c0-3-4-6-6-6l-4%202m130%202c-3%203-3%204%200%207%204%204%2010%201%2010-4%200-6-6-8-10-3m114%207c-5%203-2%2011%204%2011%202%200%205-4%205-6%200-4-5-7-9-5m-273%202c-6%202-2%2012%204%2011%205-2%206-8%201-11h-5m60%201c-6%203-4%2011%202%2011%205%200%207-7%203-10-3-2-3-2-5-1m73%201c-4%204-1%2010%204%2010%206%200%208-6%203-10-3-3-4-3-7%200m55%203c-3%205%205%2011%209%206%202-3%202-5%200-7-3-3-7-2-9%201m-159%204c-4%204-1%2010%204%2010%203%200%206-3%206-6l-2-4-4-2-4%202m131%201c-4%203-2%2010%204%2010%205%200%207-8%203-10l-3-2-4%202m113%209c-4%202-2%2010%203%2010%203%200%206-3%206-6%200-4-5-7-9-4m-139%201c-2%202-3%203-3%206%200%205%208%207%2010%202%203-5-2-10-7-8m-75%202c-4%203-4%206%200%209%203%202%206%201%208-2%202-6-4-11-8-7m130%202l-2%204c0%201%204%206%206%206s6-4%206-6c0-5-6-8-10-4m-160%205c-4%204-1%2010%204%2010%206%200%207-8%202-11-3-1-4-1-6%201m132%200c-5%202-4%209%201%2011%204%201%208-3%207-7-1-3-5-5-8-4m111%2011c-3%203-1%209%205%209s7-8%201-11c-3-1-3-1-6%202m-214%203c-3%203-2%207%202%209s9-3%207-7-7-5-9-2m131%201l-2%204c0%201%204%206%206%206s6-4%206-6c0-3-3-6-6-6l-4%202m-159%203c-6%202-4%2011%202%2011%204%200%208-5%205-9-1-2-4-3-7-2m129%203c-3%204-3%205%200%209%203%202%205%202%208-1%203-2%202-6-1-8-3-3-4-3-7%200m112%2011c-3%204%202%2010%207%208%206-2%204-11-2-11-2%200-3%201-5%203m-213%202c-5%205%200%2012%206%209%204-2%204-7%201-9s-5-2-7%200m131%201c-4%204-1%2011%204%2010l4-3%202-3-2-3c-2-3-5-4-8-1m-30%206c-5%205%201%2012%207%209%203-2%203-6%201-8-2-3-6-4-8-1m113%209c-4%204-2%209%204%209%203%200%205-2%205-5%200-5-6-8-9-4m-215%203c-5%205%202%2013%207%209%203-3%203-6%201-8-3-4-5-4-8-1m132%201c-2%201-3%206%200%208%204%205%2012-2%208-7-2-3-5-3-8-1'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.3245033112582782,"src":"/static/9c1b5b49847f229afe5459d860fd5b26/88ef8/suffix-trie.png","srcSet":"/static/9c1b5b49847f229afe5459d860fd5b26/69585/suffix-trie.png 200w,\n/static/9c1b5b49847f229afe5459d860fd5b26/497c6/suffix-trie.png 400w,\n/static/9c1b5b49847f229afe5459d860fd5b26/88ef8/suffix-trie.png 470w","sizes":"(max-width: 470px) 100vw, 470px"}}},{"publicURL":"/static/582f6585278d7f2e29461cda561e77db/suffix-tree-compressed.png","childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='150'%20viewBox='0%200%20400%20150'%20preserveAspectRatio='none'%3e%3cpath%20d='M138%206c-3%202-6%206-6%2010%201%204%202%206%207%208l5%201c-1-1%203-3%206-3h1c-2-2-2-2-1-3%204-6-5-16-12-13m-1%203c-6%204-3%2013%204%2013s10-7%206-12c-2-3-7-4-10-1M81%2028c-2%201-3%205-2%208%204%205%2013%201%2011-5-1-4-5-5-9-3m220%209c-4%203-1%2010%204%2010%203%200%206-5%205-7-1-5-5-6-9-3m-183%208c-2%201-2%206%200%208%203%204%2010%201%2010-4%200-4-6-7-10-4M25%2059c-3%202-3%208%201%2010%206%203%2011-5%206-9-1-2-5-2-7-1m30%2011c-4%203-2%2010%204%2010%205%200%207-8%203-10-3-2-4-2-7%200m186%203c-4%203-3%208%201%2011%206%203%2011-7%206-10-3-2-5-2-7-1m-131%205c-5%204%200%2011%206%208%203-1%204-6%202-9-2-1-7-1-8%201m189%201c-4%203-2%2010%204%2010%205%200%207-7%203-10l-3-2-4%202m-112%201c-5%204-4%2010%201%2012%203%201%207-2%207-6s-5-8-8-6m-28%203l-2%205c0%201%204%206%206%206s6-4%206-6c0-3-4-7-6-7l-4%202m-76%2022c-3%203-3%204%200%207s7%203%208%200c3-3%202-6%200-8-3-3-5-3-8%201m53%200c-4%203-2%2010%204%2010%203%200%205-3%205-6%200-5-5-7-9-4m81-1c-2%201-4%204-4%206s4%205%206%205c5%200%208-6%204-10-2-2-3-2-6-1m26%200c-6%203-5%2010%201%2011%206%200%209-6%205-9-3-3-4-3-6-2m23%201c-4%203-2%2010%204%2010s8-8%202-11c-2-1-3-1-6%201m-157%201c-3%203-3%205%200%208%202%202%206%203%208%200%203-2%202-6%200-8-3-3-5-3-8%200'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":2.6666666666666665,"src":"/static/582f6585278d7f2e29461cda561e77db/137ce/suffix-tree-compressed.png","srcSet":"/static/582f6585278d7f2e29461cda561e77db/69585/suffix-tree-compressed.png 200w,\n/static/582f6585278d7f2e29461cda561e77db/497c6/suffix-tree-compressed.png 400w,\n/static/582f6585278d7f2e29461cda561e77db/137ce/suffix-tree-compressed.png 468w","sizes":"(max-width: 468px) 100vw, 468px"}}}]},"fields":{"githubLink":"https://github.com/jeffwillette/jeffwillette.github.io.src/tree/dev/data/blog/uc-san-diego-algorithms/algorithms-on-strings/genome-sequencing-pattern-matching.mdx"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Genome Sequencing and Pattern Matching\",\n  \"published\": true,\n  \"createdAt\": \"2019-05-07T00:59:25.732Z\",\n  \"updatedAt\": \"2019-07-21T21:55:42.527Z\",\n  \"categories\": [\"Programming\", \"Algorithms\", \"UC San Diego\", \"String Algorithms\"],\n  \"images\": [\"./trie-matching.png\", \"./suffix-trie.png\", \"./suffix-tree-compressed.png\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A naive algorithm to find the number of matches of multiple strings in text would be to scan the text letter by letter\\nfor each string pattern and count the number of matches. The running time of this algorithm would be upper bounded\\nby \", mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"katex\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-mathml\"\n  }), mdx(\"math\", _extends({\n    parentName: \"span\"\n  }, {\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }), mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"O\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \"(\"), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"normal\"\n  }), \"\\u2223\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"T\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"e\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"x\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"t\"), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"normal\"\n  }), \"\\u2223\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"\\u2217\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"\\u2211\"), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"normal\"\n  }), \"\\u2223\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"p\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"a\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"t\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"t\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"e\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"r\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"n\"), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"normal\"\n  }), \"\\u2223\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \")\")), mdx(\"annotation\", _extends({\n    parentName: \"semantics\"\n  }, {\n    \"encoding\": \"application/x-tex\"\n  }), \"O(|Text| * \\\\sum |pattern|)\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathdefault\",\n    \"style\": {\n      \"marginRight\": \"0.02778em\"\n    }\n  }), \"O\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mopen\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), \"\\u2223\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathdefault\",\n    \"style\": {\n      \"marginRight\": \"0.13889em\"\n    }\n  }), \"T\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathdefault\"\n  }), \"e\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathdefault\"\n  }), \"x\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathdefault\"\n  }), \"t\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), \"\\u2223\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mbin\"\n  }), \"\\u2217\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  }))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1.00001em\",\n      \"verticalAlign\": \"-0.25001em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mop op-symbol small-op\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"top\": \"-0.0000050000000000050004em\"\n    }\n  }), \"\\u2211\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.16666666666666666em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), \"\\u2223\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathdefault\"\n  }), \"p\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathdefault\"\n  }), \"a\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathdefault\"\n  }), \"t\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathdefault\"\n  }), \"t\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathdefault\"\n  }), \"e\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathdefault\",\n    \"style\": {\n      \"marginRight\": \"0.02778em\"\n    }\n  }), \"r\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathdefault\"\n  }), \"n\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), \"\\u2223\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mclose\"\n  }), \")\")))), \".\"), mdx(\"p\", null, \"A quicker way to solve this would be to make one pass through the text and check each pattern with the patterns put into\\na tree structure that branches out from the root node when there is a new pattern. The trie can be constructed from the\\nfollowing algorithm.\"), mdx(props.imgs.Img1, {\n    align: \"center\",\n    width: \"40%\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"TrieConstruction(Patterns)\\n  Trie <- a graph with only a root node\\n  for string of Patterns:\\n    currentNode <- root\\n    for i <- 1 to |Pattern|:\\n      currentSymbol <- Pattern[i]\\n      if there is an outgoing edge from currentNode with label currentSymbol\\n        currentNode <- ending node of this edge\\n      else\\n        add a new node (newNode) to trie\\n        add a new edge from currentNode to newNode with label currentSymbol\\n        currentNode <- newNode\\n  return Trie\\n\")), mdx(\"p\", null, \"Patterns can then be matched by going through the text and matching by going down different paths in the trie.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"PrefixTrieMatching(Text, Trie)\\n  symbol <- first letter of Text\\n  v <- root of Trie\\n  while forever:\\n    if v is a leaf in trie:\\n      return the pattern spelled by the path from the root to v\\n    else if there is an edge (v, w) in Trie labeled by symbol\\n      symbol <- next letter of text\\n      v <- w\\n    else\\n      output \\\"no matches found\\\"\\n      return\\n\\nTrieMatching(Text, Trie)\\n  while Text is nonempty\\n    PrefixTrieMatching(Text, Trie)\\n    remove first symbol from text\\n\")), mdx(\"h2\", null, \"Suffix Tries\"), mdx(\"p\", null, \"This algorithm is fast, but uses a lot of memory because the entire text has to be loaded into memory which could be\\nhuge when matching patterns in a genome. A suffix trie (of the text) could make this faster by making a tree from all of\\nthe possible starting positions which counts all of the patterns like the image below.\"), mdx(\"p\", null, \"The memory footprint of a suffix trie is \", mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"katex\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-mathml\"\n  }), mdx(\"math\", _extends({\n    parentName: \"span\"\n  }, {\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }), mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"O\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \"(\"), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"normal\"\n  }), \"\\u2223\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"T\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"e\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"x\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"t\"), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"normal\"\n  }), \"\\u2223\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"\\u2217\"), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"normal\"\n  }), \"\\u2223\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"T\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"e\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"x\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"t\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"\\u2212\"), mdx(\"mn\", {\n    parentName: \"mrow\"\n  }, \"1\"), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"normal\"\n  }), \"\\u2223\"), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"normal\"\n  }), \"/\"), mdx(\"mn\", {\n    parentName: \"mrow\"\n  }, \"2\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \")\")), mdx(\"annotation\", _extends({\n    parentName: \"semantics\"\n  }, {\n    \"encoding\": \"application/x-tex\"\n  }), \"O(|Text| * |Text - 1| /2)\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathdefault\",\n    \"style\": {\n      \"marginRight\": \"0.02778em\"\n    }\n  }), \"O\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mopen\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), \"\\u2223\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathdefault\",\n    \"style\": {\n      \"marginRight\": \"0.13889em\"\n    }\n  }), \"T\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathdefault\"\n  }), \"e\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathdefault\"\n  }), \"x\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathdefault\"\n  }), \"t\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), \"\\u2223\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mbin\"\n  }), \"\\u2217\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  }))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), \"\\u2223\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathdefault\",\n    \"style\": {\n      \"marginRight\": \"0.13889em\"\n    }\n  }), \"T\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathdefault\"\n  }), \"e\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathdefault\"\n  }), \"x\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathdefault\"\n  }), \"t\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mbin\"\n  }), \"\\u2212\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  }))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), \"1\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), \"\\u2223\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), \"/\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), \"2\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mclose\"\n  }), \")\"))))), mdx(props.imgs.Img2, {\n    width: \"40%\",\n    align: \"center\"\n  }), mdx(\"p\", null, \"In order to lower the memory requirement, we can compress the suffix tree leaves into a single node and only store the\\nstart position and length which would give us enough information to reconstruct the suffix tree from the text.\"), mdx(props.imgs.Img3, {\n    width: \"40%\",\n    align: \"center\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","timeToRead":1,"tableOfContents":{"items":[{"url":"#suffix-tries","title":"Suffix Tries"}]},"excerpt":"A naive algorithm to find the number of matches of multiple strings in text would be to scan the text letter by letter\nfor each string…"}},"pageContext":{"id":"ccc60dff-e2dd-54a2-b3c4-fe01abae7a21"}}}