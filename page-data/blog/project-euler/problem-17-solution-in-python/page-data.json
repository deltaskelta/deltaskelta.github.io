{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/project-euler/problem-17-solution-in-python/","result":{"data":{"site":{"siteMetadata":{"author":"Jeff Willette"}},"authorAvatar":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='400'%20viewBox='0%200%20400%20400'%20preserveAspectRatio='none'%3e%3cpath%20d='M154%2018l-12%202c-4%202-38%203-47%201-13-3-20-1-13%202%205%202%2010%207%2010%209l1%207%201%205c-2%200-5-4-8-8l-2-4-1%203%201%205%201%203c-1%200-2-1-2-3-3-7-5%200-5%2015-1%2014%205%2024%2016%2026l6%202-5%2013c-11%2025-12%2031-15%2071v11h-3c-6%201-7%206-6%2017v17c-3%2024%201%2049%2011%2059%203%203%204%205%205%2010%206%2032%2010%2038%2037%2067%2015%2016%2017%2018%2017%2021%200%204-7%2018-10%2020-7%205-14%208-26%2010a271%20271%200%200047-1l-3-1-2-21%205%204%206%204v1c-1%200%207%206%209%206v1c-2%203-1%207%203%208%203%200%204-1%202-2l-1-2%202%201%209%201%208%201c1%202%2018%201%2018%200l-1-2-1-4-1-4-1-1c1-2%200-2-2-1-5%201-3-1%204-4l20-14%207-5%2013-12c8-7%208-7%208-4a587%20587%200%2000-4%2030c1%205-5%2012-14%2019l-3%203h43c23%200%2042%200%2041-1l-15-4-21-7-7-3c-5-2-7-3-11-9l-5-7c-1%200-1-11%201-24%201-6%202-8%205-12%2010-10%2020-30%2023-45%202-7%203-8%209-8%2019-3%2025-8%2031-28%206-16%207-25%207-43%200-19-1-24-8-28-3-2-4-2-8-1s-4%201-6-1c-3-4-7-49-5-58%202-11-2-25-10-35-4-5-5-7-3-11%203-3%202-7-2-12l-4-5c0-2-7-13-12-18s-15-11-18-11l-2-1c0-1-11-3-26-4-20-1-31-3-34-4l-27-4-15%202m-9%208l33%206c6%200%208%201%208%202l-2%202c-3%201-2%201%204%203l8%202c-1-3%203-2%2010%202l7%203-10-7-7-5c-1-2-14-5-27-5-5%200-7%200-8-2l-10-2c-6%200-8%200-6%201m-30%202l23%206c2%201%203%201%203%203-1%202%200%203%2010%204%208%200%209-1%201-3-5-1-5-3-1-3l-8-2a323%20323%200%2001-28-5M80%2047c0%206%202%2015%204%2020%203%205%203%205%202-1l-2-11%201%201c0%202%2018%2012%2023%2012%204%200%201-2-5-5-10-3-15-8-22-18-1-1-1-1-1%202m27%205c-2%201-1%202%202%204%203%201%204%202%203%203-2%204%205%207%208%204h3c3%201%203%201%203-1%200-1-9-7-18-11l-1%201m3%2043l-3%205c-4%206-5%2010-7%2021a170%20170%200%2001-5%2025l-1%202-2%2029-2%2031c-2%204-2%206-1%2012%201%207%201%2010-1%2016v3l2-3c3-2%207-4%207-2l-4%206c-6%206-6%208-3%2028%203%2024%208%2042%2016%2052a860%20860%200%200032%2033c-1-7%201-6%206%205%207%2012%2011%2016%2017%2018%209%203%209%203%2011%200%200-2%202-3%203-4%204-1%205%201%202%204-4%204-3%204%206%204%2016%200%2019-2%2032-20%209-11%2012-10%206%201-3%206-3%206%204%200l11-7c7-5%2028-28%2032-35%206-11%2014-29%2016-39%203-12%205-20%207-22l-1%2014v4l5-2%205-1-2-3c-6-8%203-12%2010-5l4%202%203-5%203-6%202-7c8-12%2010-27%204-39-3-8-4-8-6-5l-3%202%203%206c5%2012%204%2021-3%2027-10%209-11%2010-13%2010-1-1-1%200-1%202s-1%203-3%201v-8c1-8%201-8-1-14-3-7-3-10%201-17%204-8%2021-25%2026-26%204%200%204-1-1-3-4-2-4-2-9%201-7%204-22%2021-24%2028-1%207-4%209-8%205-2-2-2-3-2-15v-15c-6-11-6-10-5-23a567%20567%200%20001-34c0-13-1-16-6-21-2-3-4-4-4-3s-7%201-11-1c-10-4-30-6-63-8-40-3-53-3-55%200-1%201-1%201-2-1-1-3-3%200-3%205%200%203%206%2013%208%2013l1%201c0%203-13-1-17-5-3-4-5-10-3-13%201-3%200-5-3-5l-4-1c-2-1-2-1-4%202m4%2087l-3%202c-6%200-15%2011-10%2013l1%202h2c10-4%2012-4%2024-3%2018%201%2031%201%2032-1%202-2-1-7-7-9-4-2-6-2-14-3l-12-1h-13m107%200l-9%201c-11%200-19%202-20%204l-3%202c-3%200-4%206%200%206l3%202c3%201%2034%202%2043%200%206-1%208-1%2021%204%204%202%205%201%203-2l-1-2c2%200-3-7-9-11l-6-4h-22m-30%2019l1%202-1%201v1l1%202%202%201c1%200%201%201-1%202-6%204-6%209%200%205%203-2%205-1%203%202-2%202-3%207-2%207l3-3c4-4%209-8%2011-8s2%201%202%205v6l-5-1h-5l3%202c5%202%2033%202%2039%200l13-2c12-1%2013-2%203-4-6%200-8-1-10-3-4-3-10-5-18-7l-5-2h4c5%200%2013%203%2019%206%204%202%204%202%206%200%204-2%204-3%200-3-2%200-5%200-7-2-7-4-14-5-26-5-9%200-13-1-14-2-2-1-8-1-9%201h-1l-4-2c-2%200-3%200-2%201m-74%203l-8%204-8%203c-3%200-4%201%200%203%202%201%203%201%206-1%207-5%2013-6%2024-6l10-1c0-2-17-4-24-2m28%204c1%202%201%202-2%201h-23l-10%205c-4%202-8%204-11%204-6%202-6%203%201%203%204%200%207%200%2012%202%205%203%206%203%2021%203%2014%200%2021-1%2019-3l-4-1c-4%200-4%200-4-3%200-5%201-5%206%200%207%206%2010%205%204-2-2-3-2-4%201-1s5%200%202-4c-5-5-13-8-12-4m17%203c-3%202-4%2031-1%2035%201%201%202-1%202-17%201-20%201-19-1-18m-87%205c-3%209%201%2039%206%2043h1l1%202c1%202%201%200%201-7%200-11%200-11-3-16-4-6-6-13-5-21%201-6%200-6-1-1m69%2013c-4%202-14%203-22%202-9-2-14-2-16-1-3%201-2%202%203%202l10%202c10%203%2032-1%2032-5h-7m53%202l5%201%2011%202c8%202%2023%201%2029-1%206-3%205-3-7-2h-19c-12-2-19-2-19%200m-41%2028c-4%206-4%2013%200%2015%202%202%200%202-3%201l-5-2c-2%200-1-4%201-7%202-2%202-4%200-4s-6%205-7%208c0%203%204%208%2010%2011s9%204%209%202l4%202c6%206%2011%206%2016%202l3-2-7%201c-6%200-6%200-10-3l-6-4c-4-1-5-13-2-21%203-6%200-5-3%201m44%202l-1%201c-1-1-2%200-2%201h-1c0-2-4-1-5%201%200%203%200%203%204%202%203-1%203-1%205%201%201%203%200%206-2%206-5%200-21%206-21%208h5l5%201-3%201-1%201h7l1-4%201%201%204%202c4%200%2014-4%2011-5l-4%201h-2l1-1%204-8c0-2%201-1%206%202%2010%206%2024%2011%2030%2010%203%200%202-2%200-2l-3-1-9-3c-10-3-16-7-23-12-6-4-7-5-7-3m-61%205c-4%204-6%206-15%2011-10%206-12%209-12%2013%201%205%202%205%204%200%201-3%203-4%207-7%2011-6%2017-11%2019-18%201-3-1-2-3%201m85%2033c0%201-1%202-12%202a139%20139%200%2000-18%200c2-1%202-1%201-2-2-1-10%200-16%202h-9c-5-2-13-3-11-1%202%203%2015%204%2027%203l6-1-5%201c-7%203-18%202-29%200l-15-3-7-1c-1-1-2-1-5%201-4%203-5%205-1%204%202%200%208%204%2011%207l14%2010c15%209%2038%208%2053-3%2016-10%2020-13%2022-13%204%200%204-2-1-5s-5-3-5-1m-78%208c0%204%205%208%2010%208%202%200%202%200%201%201-2%201-2%201%202%203%207%204%2034%204%2043%200l5-4h-3c-2%201-12%202-13%201-2-1%201-2%205-2l5-2%206-1c4%200%2010-3%2010-5s-26%200-32%203h-17a358%20358%200%2000-22-2m17%2024l3%203c7%202%2030%201%2031-3h-34'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1,"src":"/static/2c4c167c05e10b4e6891182058715e8e/61fd6/jeff.png","srcSet":"/static/2c4c167c05e10b4e6891182058715e8e/69585/jeff.png 200w,\n/static/2c4c167c05e10b4e6891182058715e8e/61fd6/jeff.png 256w","sizes":"(max-width: 256px) 100vw, 256px"}}},"mdx":{"frontmatter":{"title":"Project Euler: Problem 17 Solution in Python","createdAt":"2014-11-03T11:24:32.000Z","updatedAt":"2019-01-21T16:23:02.942Z","categories":["Programming","Project Euler","Python"],"images":null},"fields":{"githubLink":"https://github.com/jeffwillette/jeffwillette.github.io.src/tree/dev/data/blog/project-euler/problem-17-solution-in-python/index.mdx"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Project Euler: Problem 17 Solution in Python\",\n  \"published\": true,\n  \"createdAt\": \"2014-11-03T11:24:32.000Z\",\n  \"updatedAt\": \"2019-01-21T16:23:02.942Z\",\n  \"categories\": [\"Programming\", \"Project Euler\", \"Python\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"The Problem States\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19\\nletters used in total.\\n\\nIf all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?\\nNOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one\\nhundred and fifteen) contains 20 letters. The use of \\\"and\\\" when writing out numbers is in compliance with British usage.\\n\")), mdx(\"h2\", null, \"My Solution\"), mdx(\"p\", null, \"My first thought was to make a list of all the spellings of the numbers, but then I thought it might be easier to\\ntype just the number of letters in them and just add them later. Either one would probably work fine, but there would\\nbe less typing if I just used the number to represent the number of letters.\"), mdx(\"p\", null, \"It came out to be a little bit longer than I thought it would, but I commented it pretty well, so it should make\\nsense when going through it. I made the code take an input from the user as well.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"import time\\n\\n#Instead of just using the computer to sum the digits I wanted to make a formula where I could enter whatever number I\\n#Wanted and it would sum them all up, I thought it would be a bit harder and more useful to me\\nx = input('Please input the top number in the range to sum: ')\\nx = int(x)\\n\\nstart_time = time.clock()\\n\\nnum_list = [i for i in range(1, x + 1)]\\nprint('the number list', num_list)\\n\\n#length of digits starting at 0, ending at 19. [0] is 0 because I wanted the indexes to match up with the #'s\\nS = [0, 3, 3, 5, 4, 4, 3, 5, 5, 4, 3, 6, 6, 8, 8, 7, 7, 9, 8, 8]\\n#again starting with 0 and moving up ten, twenty, etc. H and T are hundred and thousand\\nD = [0, 3, 6, 6, 5, 5, 5, 7, 6, 6]\\nH = 7\\nT = 8\\n\\n#In this loop I decided to make a list with all the letter lengths of all the numbers\\nsum_list = []\\nfor i in num_list:\\n    #I made index equal to i so I wouldn't have to modify the i\\n    index = i\\n    #i up to 19 uses a different pattern than the rest, because of the 'teens'\\n    if i <= 19:\\n        #Index will be the same as the number here\\n        sum_list.append(S[index])\\n    elif 20 <= i < 100:\\n        #The singles index will be the same number as i % 10\\n        s_index = index % 10\\n        #While i is less than 100, the tens spot will be i // 10 (10 // 10 = 1) so D[1] = 3 letters for 'ten'\\n        d_index = index // 10\\n        sum_list.append(D[d_index] + S[s_index])\\n    #This is the part where things got a little bit more complicated than I thought\\n    elif 100 <= i < 1000:\\n        #sindex is the last digit, dindex gets rid of the last digit and then %'s by 10\\n        s_index = index % 10\\n        d_index = index // 10\\n        d_index %= 10\\n        #Hname is just the digit(index) of the hundreds spot\\n        h_name = index // 100\\n        #I made this print statement to check everything\\n        #print(i, h_name, 'hundred', d_index, 'tens', s_index, 'singles', S[h_name], H, 3, D[d_index], S[s_index])\\n        if 10 < index % 100 < 20:\\n            #This section caused me some trouble because i forgot the hundreds sections 11-19 would be a little\\n            #different. I also had to add a 3 for 'and'\\n            s_index += 10\\n            sum_list.append(S[h_name] + H + 3 + S[s_index])\\n        elif index % 100 == 0:\\n            #If the index is an even 100 then it shouldn't add a 3 for 'and' to the sum\\n            sum_list.append(S[h_name] + H)\\n        else:\\n            #Most of the digits will end up in this spot, adding the and\\n            sum_list.append(S[h_name] + H + 3 + D[d_index] + S[s_index])\\n    elif index == 1000:\\n        #Since this was only supposed to go up to 1000 I stopped here\\n        t_name = i // 1000\\n        sum_list.append(T + S[t_name])\\n    else:\\n        #If there was some error, it would print into the list\\n        sum_list.append('error')\\n\\nprint('the number of letters in each number is:', sum_list)\\n\\n# The loop that adds everything together\\nthe_sum = 0\\nfor i in sum_list:\\n    the_sum += i\\n\\nprint('the sum of all the digits is:', the_sum)\\nprint()\\nprint('finished in:', time.clock() - start_time, 'seconds')\\n\")), mdx(\"h2\", null, \"The Output\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Please input the top number in the range to sum: 1000\\nthe number listnthe number of letters in each number is: [3, 3, 5, 4, 4, 3, 5, 5, 4, 3, 6, 6, 8, 8, 7, 7, 9, 8, 8, 6, 9, 9, 11, 10, 10, 9, 11, 11, 10, 6, 9, 9, 11, 10, 10, 9, 11, 11, 10, 5, 8, 8, 10, 9, 9, 8, 10, 10, 9, 5, 8, 8, 10, 9, 9, 8, 10, 10, 9, 5, 8, 8, 10, 9, 9, 8, 10, 10, 9, 7, 10, 10, 12, 11, 11, 10, 12, 12, 11, 6, 9, 9, 11, 10, 10, 9, 11, 11, 10, 6, 9, 9, 11, 10, 10, 9, 11, 11, 10, 10, 16, 16, 18, 17, 17, 16, 18, 18, 17, 16, 19, 19, 21, 21, 20, 20, 22, 21, 21, 19, 22, 22, 24, 23, 23, 22, 24, 24, 23, 19, 22, 22, 24, 23, 23, 22, 24, 24, 23, 18, 21, 21, 23, 22, 22, 21, 23, 23, 22, 18, 21, 21, 23, 22, 22, 21, 23, 23, 22, 18, 21, 21, 23, 22, 22, 21, 23, 23, 22, 20, 23, 23, 25, 24, 24, 23, 25, 25, 24, 19, 22, 22, 24, 23, 23, 22, 24, 24, 23, 19, 22, 22, 24, 23, 23, 22, 24, 24, 23, 10, 16, 16, 18, 17, 17, 16, 18, 18, 17, 16, 19, 19, 21, 21, 20, 20, 22, 21, 21, 19, 22, 22, 24, 23, 23, 22, 24, 24, 23, 19, 22, 22, 24, 23, 23, 22, 24, 24, 23, 18, 21, 21, 23, 22, 22, 21, 23, 23, 22, 18, 21, 21, 23, 22, 22, 21, 23, 23, 22, 18, 21, 21, 23, 22, 22, 21, 23, 23, 22, 20, 23, 23, 25, 24, 24, 23, 25, 25, 24, 19, 22, 22, 24, 23, 23, 22, 24, 24, 23, 19, 22, 22, 24, 23, 23, 22, 24, 24, 23, 12, 18, 18, 20, 19, 19, 18, 20, 20, 19, 18, 21, 21, 23, 23, 22, 22, 24, 23, 23, 21, 24, 24, 26, 25, 25, 24, 26, 26, 25, 21, 24, 24, 26, 25, 25, 24, 26, 26, 25, 20, 23, 23, 25, 24, 24, 23, 25, 25, 24, 20, 23, 23, 25, 24, 24, 23, 25, 25, 24, 20, 23, 23, 25, 24, 24, 23, 25, 25, 24, 22, 25, 25, 27, 26, 26, 25, 27, 27, 26, 21, 24, 24, 26, 25, 25, 24, 26, 26, 25, 21, 24, 24, 26, 25, 25, 24, 26, 26, 25, 11, 17, 17, 19, 18, 18, 17, 19, 19, 18, 17, 20, 20, 22, 22, 21, 21, 23, 22, 22, 20, 23, 23, 25, 24, 24, 23, 25, 25, 24, 20, 23, 23, 25, 24, 24, 23, 25, 25, 24, 19, 22, 22, 24, 23, 23, 22, 24, 24, 23, 19, 22, 22, 24, 23, 23, 22, 24, 24, 23, 19, 22, 22, 24, 23, 23, 22, 24, 24, 23, 21, 24, 24, 26, 25, 25, 24, 26, 26, 25, 20, 23, 23, 25, 24, 24, 23, 25, 25, 24, 20, 23, 23, 25, 24, 24, 23, 25, 25, 24, 11, 17, 17, 19, 18, 18, 17, 19, 19, 18, 17, 20, 20, 22, 22, 21, 21, 23, 22, 22, 20, 23, 23, 25, 24, 24, 23, 25, 25, 24, 20, 23, 23, 25, 24, 24, 23, 25, 25, 24, 19, 22, 22, 24, 23, 23, 22, 24, 24, 23, 19, 22, 22, 24, 23, 23, 22, 24, 24, 23, 19, 22, 22, 24, 23, 23, 22, 24, 24, 23, 21, 24, 24, 26, 25, 25, 24, 26, 26, 25, 20, 23, 23, 25, 24, 24, 23, 25, 25, 24, 20, 23, 23, 25, 24, 24, 23, 25, 25, 24, 10, 16, 16, 18, 17, 17, 16, 18, 18, 17, 16, 19, 19, 21, 21, 20, 20, 22, 21, 21, 19, 22, 22, 24, 23, 23, 22, 24, 24, 23, 19, 22, 22, 24, 23, 23, 22, 24, 24, 23, 18, 21, 21, 23, 22, 22, 21, 23, 23, 22, 18, 21, 21, 23, 22, 22, 21, 23, 23, 22, 18, 21, 21, 23, 22, 22, 21, 23, 23, 22, 20, 23, 23, 25, 24, 24, 23, 25, 25, 24, 19, 22, 22, 24, 23, 23, 22, 24, 24, 23, 19, 22, 22, 24, 23, 23, 22, 24, 24, 23, 12, 18, 18, 20, 19, 19, 18, 20, 20, 19, 18, 21, 21, 23, 23, 22, 22, 24, 23, 23, 21, 24, 24, 26, 25, 25, 24, 26, 26, 25, 21, 24, 24, 26, 25, 25, 24, 26, 26, 25, 20, 23, 23, 25, 24, 24, 23, 25, 25, 24, 20, 23, 23, 25, 24, 24, 23, 25, 25, 24, 20, 23, 23, 25, 24, 24, 23, 25, 25, 24, 22, 25, 25, 27, 26, 26, 25, 27, 27, 26, 21, 24, 24, 26, 25, 25, 24, 26, 26, 25, 21, 24, 24, 26, 25, 25, 24, 26, 26, 25, 12, 18, 18, 20, 19, 19, 18, 20, 20, 19, 18, 21, 21, 23, 23, 22, 22, 24, 23, 23, 21, 24, 24, 26, 25, 25, 24, 26, 26, 25, 21, 24, 24, 26, 25, 25, 24, 26, 26, 25, 20, 23, 23, 25, 24, 24, 23, 25, 25, 24, 20, 23, 23, 25, 24, 24, 23, 25, 25, 24, 20, 23, 23, 25, 24, 24, 23, 25, 25, 24, 22, 25, 25, 27, 26, 26, 25, 27, 27, 26, 21, 24, 24, 26, 25, 25, 24, 26, 26, 25, 21, 24, 24, 26, 25, 25, 24, 26, 26, 25, 11, 17, 17, 19, 18, 18, 17, 19, 19, 18, 17, 20, 20, 22, 22, 21, 21, 23, 22, 22, 20, 23, 23, 25, 24, 24, 23, 25, 25, 24, 20, 23, 23, 25, 24, 24, 23, 25, 25, 24, 19, 22, 22, 24, 23, 23, 22, 24, 24, 23, 19, 22, 22, 24, 23, 23, 22, 24, 24, 23, 19, 22, 22, 24, 23, 23, 22, 24, 24, 23, 21, 24, 24, 26, 25, 25, 24, 26, 26, 25, 20, 23, 23, 25, 24, 24, 23, 25, 25, 24, 20, 23, 23, 25, 24, 24, 23, 25, 25, 24, 11]\\nthe sum of all the digits is: 21124\\n\\nfinished in: 0.011987437822008442 seconds\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","timeToRead":1,"tableOfContents":{"items":[{"url":"#the-problem-states","title":"The Problem States"},{"url":"#my-solution","title":"My Solution"},{"url":"#the-output","title":"The Output"}]},"excerpt":"The Problem States My Solution My first thought was to make a list of all the spellings of the numbers, but then I thought it might be…"}},"pageContext":{"id":"5feaee32-b05b-5124-ba40-0271a0655438"}}}