{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/project-euler/problem-30-solution-in-python/","result":{"data":{"site":{"siteMetadata":{"author":"Jeff Willette"}},"authorAvatar":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='400'%20viewBox='0%200%20400%20400'%20preserveAspectRatio='none'%3e%3cpath%20d='M154%2018l-12%202c-4%202-38%203-47%201-13-3-20-1-13%202%205%202%2010%207%2010%209l1%207%201%205c-2%200-5-4-8-8l-2-4-1%203%201%205%201%203c-1%200-2-1-2-3-3-7-5%200-5%2015-1%2014%205%2024%2016%2026l6%202-5%2013c-11%2025-12%2031-15%2071v11h-3c-6%201-7%206-6%2017v17c-3%2024%201%2049%2011%2059%203%203%204%205%205%2010%206%2032%2010%2038%2037%2067%2015%2016%2017%2018%2017%2021%200%204-7%2018-10%2020-7%205-14%208-26%2010a271%20271%200%200047-1l-3-1-2-21%205%204%206%204v1c-1%200%207%206%209%206v1c-2%203-1%207%203%208%203%200%204-1%202-2l-1-2%202%201%209%201%208%201c1%202%2018%201%2018%200l-1-2-1-4-1-4-1-1c1-2%200-2-2-1-5%201-3-1%204-4l20-14%207-5%2013-12c8-7%208-7%208-4a587%20587%200%2000-4%2030c1%205-5%2012-14%2019l-3%203h43c23%200%2042%200%2041-1l-15-4-21-7-7-3c-5-2-7-3-11-9l-5-7c-1%200-1-11%201-24%201-6%202-8%205-12%2010-10%2020-30%2023-45%202-7%203-8%209-8%2019-3%2025-8%2031-28%206-16%207-25%207-43%200-19-1-24-8-28-3-2-4-2-8-1s-4%201-6-1c-3-4-7-49-5-58%202-11-2-25-10-35-4-5-5-7-3-11%203-3%202-7-2-12l-4-5c0-2-7-13-12-18s-15-11-18-11l-2-1c0-1-11-3-26-4-20-1-31-3-34-4l-27-4-15%202m-9%208l33%206c6%200%208%201%208%202l-2%202c-3%201-2%201%204%203l8%202c-1-3%203-2%2010%202l7%203-10-7-7-5c-1-2-14-5-27-5-5%200-7%200-8-2l-10-2c-6%200-8%200-6%201m-30%202l23%206c2%201%203%201%203%203-1%202%200%203%2010%204%208%200%209-1%201-3-5-1-5-3-1-3l-8-2a323%20323%200%2001-28-5M80%2047c0%206%202%2015%204%2020%203%205%203%205%202-1l-2-11%201%201c0%202%2018%2012%2023%2012%204%200%201-2-5-5-10-3-15-8-22-18-1-1-1-1-1%202m27%205c-2%201-1%202%202%204%203%201%204%202%203%203-2%204%205%207%208%204h3c3%201%203%201%203-1%200-1-9-7-18-11l-1%201m3%2043l-3%205c-4%206-5%2010-7%2021a170%20170%200%2001-5%2025l-1%202-2%2029-2%2031c-2%204-2%206-1%2012%201%207%201%2010-1%2016v3l2-3c3-2%207-4%207-2l-4%206c-6%206-6%208-3%2028%203%2024%208%2042%2016%2052a860%20860%200%200032%2033c-1-7%201-6%206%205%207%2012%2011%2016%2017%2018%209%203%209%203%2011%200%200-2%202-3%203-4%204-1%205%201%202%204-4%204-3%204%206%204%2016%200%2019-2%2032-20%209-11%2012-10%206%201-3%206-3%206%204%200l11-7c7-5%2028-28%2032-35%206-11%2014-29%2016-39%203-12%205-20%207-22l-1%2014v4l5-2%205-1-2-3c-6-8%203-12%2010-5l4%202%203-5%203-6%202-7c8-12%2010-27%204-39-3-8-4-8-6-5l-3%202%203%206c5%2012%204%2021-3%2027-10%209-11%2010-13%2010-1-1-1%200-1%202s-1%203-3%201v-8c1-8%201-8-1-14-3-7-3-10%201-17%204-8%2021-25%2026-26%204%200%204-1-1-3-4-2-4-2-9%201-7%204-22%2021-24%2028-1%207-4%209-8%205-2-2-2-3-2-15v-15c-6-11-6-10-5-23a567%20567%200%20001-34c0-13-1-16-6-21-2-3-4-4-4-3s-7%201-11-1c-10-4-30-6-63-8-40-3-53-3-55%200-1%201-1%201-2-1-1-3-3%200-3%205%200%203%206%2013%208%2013l1%201c0%203-13-1-17-5-3-4-5-10-3-13%201-3%200-5-3-5l-4-1c-2-1-2-1-4%202m4%2087l-3%202c-6%200-15%2011-10%2013l1%202h2c10-4%2012-4%2024-3%2018%201%2031%201%2032-1%202-2-1-7-7-9-4-2-6-2-14-3l-12-1h-13m107%200l-9%201c-11%200-19%202-20%204l-3%202c-3%200-4%206%200%206l3%202c3%201%2034%202%2043%200%206-1%208-1%2021%204%204%202%205%201%203-2l-1-2c2%200-3-7-9-11l-6-4h-22m-30%2019l1%202-1%201v1l1%202%202%201c1%200%201%201-1%202-6%204-6%209%200%205%203-2%205-1%203%202-2%202-3%207-2%207l3-3c4-4%209-8%2011-8s2%201%202%205v6l-5-1h-5l3%202c5%202%2033%202%2039%200l13-2c12-1%2013-2%203-4-6%200-8-1-10-3-4-3-10-5-18-7l-5-2h4c5%200%2013%203%2019%206%204%202%204%202%206%200%204-2%204-3%200-3-2%200-5%200-7-2-7-4-14-5-26-5-9%200-13-1-14-2-2-1-8-1-9%201h-1l-4-2c-2%200-3%200-2%201m-74%203l-8%204-8%203c-3%200-4%201%200%203%202%201%203%201%206-1%207-5%2013-6%2024-6l10-1c0-2-17-4-24-2m28%204c1%202%201%202-2%201h-23l-10%205c-4%202-8%204-11%204-6%202-6%203%201%203%204%200%207%200%2012%202%205%203%206%203%2021%203%2014%200%2021-1%2019-3l-4-1c-4%200-4%200-4-3%200-5%201-5%206%200%207%206%2010%205%204-2-2-3-2-4%201-1s5%200%202-4c-5-5-13-8-12-4m17%203c-3%202-4%2031-1%2035%201%201%202-1%202-17%201-20%201-19-1-18m-87%205c-3%209%201%2039%206%2043h1l1%202c1%202%201%200%201-7%200-11%200-11-3-16-4-6-6-13-5-21%201-6%200-6-1-1m69%2013c-4%202-14%203-22%202-9-2-14-2-16-1-3%201-2%202%203%202l10%202c10%203%2032-1%2032-5h-7m53%202l5%201%2011%202c8%202%2023%201%2029-1%206-3%205-3-7-2h-19c-12-2-19-2-19%200m-41%2028c-4%206-4%2013%200%2015%202%202%200%202-3%201l-5-2c-2%200-1-4%201-7%202-2%202-4%200-4s-6%205-7%208c0%203%204%208%2010%2011s9%204%209%202l4%202c6%206%2011%206%2016%202l3-2-7%201c-6%200-6%200-10-3l-6-4c-4-1-5-13-2-21%203-6%200-5-3%201m44%202l-1%201c-1-1-2%200-2%201h-1c0-2-4-1-5%201%200%203%200%203%204%202%203-1%203-1%205%201%201%203%200%206-2%206-5%200-21%206-21%208h5l5%201-3%201-1%201h7l1-4%201%201%204%202c4%200%2014-4%2011-5l-4%201h-2l1-1%204-8c0-2%201-1%206%202%2010%206%2024%2011%2030%2010%203%200%202-2%200-2l-3-1-9-3c-10-3-16-7-23-12-6-4-7-5-7-3m-61%205c-4%204-6%206-15%2011-10%206-12%209-12%2013%201%205%202%205%204%200%201-3%203-4%207-7%2011-6%2017-11%2019-18%201-3-1-2-3%201m85%2033c0%201-1%202-12%202a139%20139%200%2000-18%200c2-1%202-1%201-2-2-1-10%200-16%202h-9c-5-2-13-3-11-1%202%203%2015%204%2027%203l6-1-5%201c-7%203-18%202-29%200l-15-3-7-1c-1-1-2-1-5%201-4%203-5%205-1%204%202%200%208%204%2011%207l14%2010c15%209%2038%208%2053-3%2016-10%2020-13%2022-13%204%200%204-2-1-5s-5-3-5-1m-78%208c0%204%205%208%2010%208%202%200%202%200%201%201-2%201-2%201%202%203%207%204%2034%204%2043%200l5-4h-3c-2%201-12%202-13%201-2-1%201-2%205-2l5-2%206-1c4%200%2010-3%2010-5s-26%200-32%203h-17a358%20358%200%2000-22-2m17%2024l3%203c7%202%2030%201%2031-3h-34'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1,"src":"/static/2c4c167c05e10b4e6891182058715e8e/61fd6/jeff.png","srcSet":"/static/2c4c167c05e10b4e6891182058715e8e/69585/jeff.png 200w,\n/static/2c4c167c05e10b4e6891182058715e8e/61fd6/jeff.png 256w","sizes":"(max-width: 256px) 100vw, 256px"}}},"mdx":{"frontmatter":{"title":"Project Euler: Problem 30 Solution in Python","createdAt":"2014-11-10T10:33:39.000Z","updatedAt":"2019-04-19T16:12:40.457Z","categories":["Programming","Project Euler","Python"],"images":[{"publicURL":"/static/33b97484c47ee734eb130eac650e3171/project-euler-problem-30.png","childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='186'%20viewBox='0%200%20400%20186'%20preserveAspectRatio='none'%3e%3cpath%20d='M38%2036l1%203c2%201%202%202%200%202-1%201-1%201%201%201l3-1%202-2c2%200%201%202-1%202-1%201%202%201%207%201%207-1%207-1%207-3-1-4-1-5-3-2-2%202-2%202-2%200-1-2-4-3-4-1h-1c-2-2-5-1-5%202h-2v-3l-3%201m88%2029l-1%203c-1%201%200%201%203%201l4-1h1l4%201%204-1h1l4%201%204-1h1c1%202%204%200%204-2s-1-3-8-3c-9%200-11%201-11%203-1%202-1%202-2%201l1-3c1-1%200-1-2-1-4%200-5%201-5%203l-1%203v-3l-1-3v2m234%2024l-12%2023a2328%202328%200%2000-153%2020%20435%20435%200%200035-2l117-16-8%2017-15%203-13%203-66%201a1559%201559%200%20002%201l68-1%2012-2c14-3%2013-3%2019-14l5-8%2010-2%2011-3h-2a11549%2011549%200%2000-18%202l10-23c12-23%2011-22%2010-22l-12%2023M96%2096c-3%202%201%207%203%205h13c1%202%204-1%204-3-1-3-4-4-5-2h-1l-2-1-2%201H96m-5%2014c-2%200-1%206%201%207l2-1h18c1%202%204%200%204-3s-3-4-4-3c-1%202-2%202-3%200h-2c-1%202-2%202-3%200H91m-5%2015v7l2-1h16c2-2%202-2%203%200h2c2-2%202-2%203%200s4%200%204-3-3-5-4-3c-2%202-2%202-3%200H86'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":2.150537634408602,"src":"/static/33b97484c47ee734eb130eac650e3171/f8f3a/project-euler-problem-30.png","srcSet":"/static/33b97484c47ee734eb130eac650e3171/69585/project-euler-problem-30.png 200w,\n/static/33b97484c47ee734eb130eac650e3171/497c6/project-euler-problem-30.png 400w,\n/static/33b97484c47ee734eb130eac650e3171/f8f3a/project-euler-problem-30.png 538w","sizes":"(max-width: 538px) 100vw, 538px"}}}]},"fields":{"githubLink":"https://github.com/jeffwillette/jeffwillette.github.io.src/tree/dev/data/blog/project-euler/problem-30-solution-in-python/index.mdx"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Project Euler: Problem 30 Solution in Python\",\n  \"published\": true,\n  \"createdAt\": \"2014-11-10T10:33:39.000Z\",\n  \"updatedAt\": \"2019-04-19T16:12:40.457Z\",\n  \"images\": [\"./project-euler-problem-30.png\"],\n  \"categories\": [\"Programming\", \"Project Euler\", \"Python\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"The Problem States\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Surprisingly there are only three numbers that can be written as the sum of fourth powers of their digits:\\n1634 = 1\", mdx(\"sup\", null, \"4\"), \" + 6\", mdx(\"sup\", null, \"4\"), \" + 3\", mdx(\"sup\", null, \"4\"), \" + 4\", mdx(\"sup\", null, \"4\"), \"\\n8208 = 8\", mdx(\"sup\", null, \"4\"), \" + 2\", mdx(\"sup\", null, \"4\"), \" + 0\", mdx(\"sup\", null, \"4\"), \" + 8\", mdx(\"sup\", null, \"4\"), \"\\n9474 = 9\", mdx(\"sup\", null, \"4\"), \" + 4\", mdx(\"sup\", null, \"4\"), \" + 7\", mdx(\"sup\", null, \"4\"), \" + 4\", mdx(\"sup\", null, \"4\")), mdx(\"p\", {\n    className: \"info\"\n  }, \"As 1 = 1\", mdx(\"sup\", null, \"4\"), \" is not a sum it is not included.\"), \"The sum of these numbers is 1634 + 8208 + 9474 = 19316.\", mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Find the sum of all the numbers that can be written as the sum of fifth powers of their digits.\")), mdx(\"h2\", null, \"My Solution\"), mdx(\"p\", null, \"This problem was pretty hard to grasp because I couldn't first figure out what range of numbers to check. I could\\nobviously write something that ran through numbers, but where do I start? Where do I stop? After a little bit of\\nresearch I was able to figure out how to find an upper limit.\"), mdx(\"p\", null, \"The biggest possible digit is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"9\"), \" and I have to raise it to the 5th power.\\nThis means that 9\", mdx(\"sup\", null, \"5\"), \" + 9\", mdx(\"sup\", null, \"5\"), \" would be a 2 digit number (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"99\"), \") when evaluating the single digit, and\\na six digit number when evaluating 9\", mdx(\"sup\", null, \"5\"), \" + 9\", mdx(\"sup\", null, \"5\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"9^5 * 2\"), \"). the multiplier (2) represents the\\nnumber of digits. Therefore, I have to find an upper limit where the smallest \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"X\"), \" digit number is\\nlarger than \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"9^5 * X\"), \". It would be impossible to hit this amount of digits because the largest number I can construct\\naccording to the problem (single digits raised to the fifth power and summed) is less digits than \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"X\"), \" digits.\"), mdx(props.imgs.Img1, {\n    align: \"left\"\n  }), mdx(\"p\", null, \"When I use 7 as a multiplier, I get 9\", mdx(\"sup\", null, \"5\"), \" * 7 = 413,343. The smallest 7 digit number is 1,000,000 and since\\nthe single digits raised to the \", mdx(\"sup\", null, \"5\"), \" will never quite catch up with the adding of digits (one line is linear,\\nthe other is exponential), I can stop there. I made a graph for illustration below.\"), mdx(\"p\", null, \"I was not sure how to go about eliminating the lower bound since 0^5 will be zero and 1^5 will be 1. If it turns out\\nto be a problem, I will go back and figure it out later.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"import time\\nstart_time = time.clock()\\n\\nfinal_sum = 0\\nfor i in range(2, 354294):\\n    # I made a loop and then made i a string so I could re-iterate through it and do what I need\\n    x = str(i)\\n    temp_sum = 0\\n    for j in x:\\n        y = int(j) ** 5\\n        temp_sum += y\\n        if i == temp_sum:\\n            # If i is equal to the sum of the digits to the 5th power, add it to the final sum\\n            final_sum += i\\n\\nprint(final_sum)\\nprint('finished in:', time.clock() - start_time, 'seconds')\\n\")), mdx(\"h2\", null, \"The Output\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"443839\\nfinished in: 4.913101301846909 seconds\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","timeToRead":1,"tableOfContents":{"items":[{"url":"#the-problem-states","title":"The Problem States"},{"url":"#my-solution","title":"My Solution"},{"url":"#the-output","title":"The Output"}]},"excerpt":"The Problem States Surprisingly there are only three numbers that can be written as the sum of fourth powers of their digits:\n1634 = 1…"}},"pageContext":{"id":"4d4ee8d4-08b6-5999-a745-11a4984ca7c8"}}}