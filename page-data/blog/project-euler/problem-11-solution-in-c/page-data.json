{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/project-euler/problem-11-solution-in-c/","result":{"data":{"site":{"siteMetadata":{"author":"Jeff Willette"}},"authorAvatar":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='400'%20viewBox='0%200%20400%20400'%20preserveAspectRatio='none'%3e%3cpath%20d='M154%2018l-12%202c-4%202-38%203-47%201-13-3-20-1-13%202%205%202%2010%207%2010%209l1%207%201%205c-2%200-5-4-8-8l-2-4-1%203%201%205%201%203c-1%200-2-1-2-3-3-7-5%200-5%2015-1%2014%205%2024%2016%2026l6%202-5%2013c-11%2025-12%2031-15%2071v11h-3c-6%201-7%206-6%2017v17c-3%2024%201%2049%2011%2059%203%203%204%205%205%2010%206%2032%2010%2038%2037%2067%2015%2016%2017%2018%2017%2021%200%204-7%2018-10%2020-7%205-14%208-26%2010a271%20271%200%200047-1l-3-1-2-21%205%204%206%204v1c-1%200%207%206%209%206v1c-2%203-1%207%203%208%203%200%204-1%202-2l-1-2%202%201%209%201%208%201c1%202%2018%201%2018%200l-1-2-1-4-1-4-1-1c1-2%200-2-2-1-5%201-3-1%204-4l20-14%207-5%2013-12c8-7%208-7%208-4a587%20587%200%2000-4%2030c1%205-5%2012-14%2019l-3%203h43c23%200%2042%200%2041-1l-15-4-21-7-7-3c-5-2-7-3-11-9l-5-7c-1%200-1-11%201-24%201-6%202-8%205-12%2010-10%2020-30%2023-45%202-7%203-8%209-8%2019-3%2025-8%2031-28%206-16%207-25%207-43%200-19-1-24-8-28-3-2-4-2-8-1s-4%201-6-1c-3-4-7-49-5-58%202-11-2-25-10-35-4-5-5-7-3-11%203-3%202-7-2-12l-4-5c0-2-7-13-12-18s-15-11-18-11l-2-1c0-1-11-3-26-4-20-1-31-3-34-4l-27-4-15%202m-9%208l33%206c6%200%208%201%208%202l-2%202c-3%201-2%201%204%203l8%202c-1-3%203-2%2010%202l7%203-10-7-7-5c-1-2-14-5-27-5-5%200-7%200-8-2l-10-2c-6%200-8%200-6%201m-30%202l23%206c2%201%203%201%203%203-1%202%200%203%2010%204%208%200%209-1%201-3-5-1-5-3-1-3l-8-2a323%20323%200%2001-28-5M80%2047c0%206%202%2015%204%2020%203%205%203%205%202-1l-2-11%201%201c0%202%2018%2012%2023%2012%204%200%201-2-5-5-10-3-15-8-22-18-1-1-1-1-1%202m27%205c-2%201-1%202%202%204%203%201%204%202%203%203-2%204%205%207%208%204h3c3%201%203%201%203-1%200-1-9-7-18-11l-1%201m3%2043l-3%205c-4%206-5%2010-7%2021a170%20170%200%2001-5%2025l-1%202-2%2029-2%2031c-2%204-2%206-1%2012%201%207%201%2010-1%2016v3l2-3c3-2%207-4%207-2l-4%206c-6%206-6%208-3%2028%203%2024%208%2042%2016%2052a860%20860%200%200032%2033c-1-7%201-6%206%205%207%2012%2011%2016%2017%2018%209%203%209%203%2011%200%200-2%202-3%203-4%204-1%205%201%202%204-4%204-3%204%206%204%2016%200%2019-2%2032-20%209-11%2012-10%206%201-3%206-3%206%204%200l11-7c7-5%2028-28%2032-35%206-11%2014-29%2016-39%203-12%205-20%207-22l-1%2014v4l5-2%205-1-2-3c-6-8%203-12%2010-5l4%202%203-5%203-6%202-7c8-12%2010-27%204-39-3-8-4-8-6-5l-3%202%203%206c5%2012%204%2021-3%2027-10%209-11%2010-13%2010-1-1-1%200-1%202s-1%203-3%201v-8c1-8%201-8-1-14-3-7-3-10%201-17%204-8%2021-25%2026-26%204%200%204-1-1-3-4-2-4-2-9%201-7%204-22%2021-24%2028-1%207-4%209-8%205-2-2-2-3-2-15v-15c-6-11-6-10-5-23a567%20567%200%20001-34c0-13-1-16-6-21-2-3-4-4-4-3s-7%201-11-1c-10-4-30-6-63-8-40-3-53-3-55%200-1%201-1%201-2-1-1-3-3%200-3%205%200%203%206%2013%208%2013l1%201c0%203-13-1-17-5-3-4-5-10-3-13%201-3%200-5-3-5l-4-1c-2-1-2-1-4%202m4%2087l-3%202c-6%200-15%2011-10%2013l1%202h2c10-4%2012-4%2024-3%2018%201%2031%201%2032-1%202-2-1-7-7-9-4-2-6-2-14-3l-12-1h-13m107%200l-9%201c-11%200-19%202-20%204l-3%202c-3%200-4%206%200%206l3%202c3%201%2034%202%2043%200%206-1%208-1%2021%204%204%202%205%201%203-2l-1-2c2%200-3-7-9-11l-6-4h-22m-30%2019l1%202-1%201v1l1%202%202%201c1%200%201%201-1%202-6%204-6%209%200%205%203-2%205-1%203%202-2%202-3%207-2%207l3-3c4-4%209-8%2011-8s2%201%202%205v6l-5-1h-5l3%202c5%202%2033%202%2039%200l13-2c12-1%2013-2%203-4-6%200-8-1-10-3-4-3-10-5-18-7l-5-2h4c5%200%2013%203%2019%206%204%202%204%202%206%200%204-2%204-3%200-3-2%200-5%200-7-2-7-4-14-5-26-5-9%200-13-1-14-2-2-1-8-1-9%201h-1l-4-2c-2%200-3%200-2%201m-74%203l-8%204-8%203c-3%200-4%201%200%203%202%201%203%201%206-1%207-5%2013-6%2024-6l10-1c0-2-17-4-24-2m28%204c1%202%201%202-2%201h-23l-10%205c-4%202-8%204-11%204-6%202-6%203%201%203%204%200%207%200%2012%202%205%203%206%203%2021%203%2014%200%2021-1%2019-3l-4-1c-4%200-4%200-4-3%200-5%201-5%206%200%207%206%2010%205%204-2-2-3-2-4%201-1s5%200%202-4c-5-5-13-8-12-4m17%203c-3%202-4%2031-1%2035%201%201%202-1%202-17%201-20%201-19-1-18m-87%205c-3%209%201%2039%206%2043h1l1%202c1%202%201%200%201-7%200-11%200-11-3-16-4-6-6-13-5-21%201-6%200-6-1-1m69%2013c-4%202-14%203-22%202-9-2-14-2-16-1-3%201-2%202%203%202l10%202c10%203%2032-1%2032-5h-7m53%202l5%201%2011%202c8%202%2023%201%2029-1%206-3%205-3-7-2h-19c-12-2-19-2-19%200m-41%2028c-4%206-4%2013%200%2015%202%202%200%202-3%201l-5-2c-2%200-1-4%201-7%202-2%202-4%200-4s-6%205-7%208c0%203%204%208%2010%2011s9%204%209%202l4%202c6%206%2011%206%2016%202l3-2-7%201c-6%200-6%200-10-3l-6-4c-4-1-5-13-2-21%203-6%200-5-3%201m44%202l-1%201c-1-1-2%200-2%201h-1c0-2-4-1-5%201%200%203%200%203%204%202%203-1%203-1%205%201%201%203%200%206-2%206-5%200-21%206-21%208h5l5%201-3%201-1%201h7l1-4%201%201%204%202c4%200%2014-4%2011-5l-4%201h-2l1-1%204-8c0-2%201-1%206%202%2010%206%2024%2011%2030%2010%203%200%202-2%200-2l-3-1-9-3c-10-3-16-7-23-12-6-4-7-5-7-3m-61%205c-4%204-6%206-15%2011-10%206-12%209-12%2013%201%205%202%205%204%200%201-3%203-4%207-7%2011-6%2017-11%2019-18%201-3-1-2-3%201m85%2033c0%201-1%202-12%202a139%20139%200%2000-18%200c2-1%202-1%201-2-2-1-10%200-16%202h-9c-5-2-13-3-11-1%202%203%2015%204%2027%203l6-1-5%201c-7%203-18%202-29%200l-15-3-7-1c-1-1-2-1-5%201-4%203-5%205-1%204%202%200%208%204%2011%207l14%2010c15%209%2038%208%2053-3%2016-10%2020-13%2022-13%204%200%204-2-1-5s-5-3-5-1m-78%208c0%204%205%208%2010%208%202%200%202%200%201%201-2%201-2%201%202%203%207%204%2034%204%2043%200l5-4h-3c-2%201-12%202-13%201-2-1%201-2%205-2l5-2%206-1c4%200%2010-3%2010-5s-26%200-32%203h-17a358%20358%200%2000-22-2m17%2024l3%203c7%202%2030%201%2031-3h-34'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1,"src":"/static/2c4c167c05e10b4e6891182058715e8e/61fd6/jeff.png","srcSet":"/static/2c4c167c05e10b4e6891182058715e8e/69585/jeff.png 200w,\n/static/2c4c167c05e10b4e6891182058715e8e/61fd6/jeff.png 256w","sizes":"(max-width: 256px) 100vw, 256px"}}},"mdx":{"frontmatter":{"title":"Project Euler: Problem 11 Solution in C","createdAt":"2016-07-20T22:23:07.000Z","updatedAt":"2019-01-21T16:25:15.428Z","categories":["C","Programming","Project Euler"],"images":null},"fields":{"githubLink":"https://github.com/jeffwillette/jeffwillette.github.io.src/tree/dev/data/blog/project-euler/problem-11-solution-in-c/index.mdx"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Project Euler: Problem 11 Solution in C\",\n  \"published\": true,\n  \"createdAt\": \"2016-07-20T22:23:07.000Z\",\n  \"updatedAt\": \"2019-01-21T16:25:15.428Z\",\n  \"categories\": [\"C\", \"Programming\", \"Project Euler\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"The Problem States\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"In the 20\\xD720 grid below, four numbers along a diagonal line have been marked in red.\\n\\n08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08\\n49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00\\n81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65\\n52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91\\n22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80\\n24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50\\n32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70\\n67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21\\n24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72\\n21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95\\n78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92\\n16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57\\n86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58\\n19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40\\n04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66\\n88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69\\n04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36\\n20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16\\n20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54\\n01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48\\n\\nThe product of these numbers is 26 \\xD7 63 \\xD7 78 \\xD7 14 = 1788696.\\n\\nWhat is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20\\xD720 grid?\\n\")), mdx(\"h2\", null, \"My Solution\"), mdx(\"p\", null, \"It was a long and cumbersome process to open the file and make sure everything is working right in C so I spent most\\nof my time doing that. I could have just pasted the info in, but I wanted more practice with opening and working with\\nfiles. The calculations were pretty easy once everything was done with the file.\"), mdx(\"p\", null, \"After the file was ready and the numbers were loaded into memory I wrote little processes for checking each one of\\nthe possibilities separately. I checked the horizontal products, vertical products, forward diagonals, and backwards\\ndiagonals.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-c\"\n  }), \"#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint main ()\\n{\\n  //Reading what is in the file\\n  FILE *fp = fopen(\\\"./11.txt\\\", \\\"r\\\");\\n\\n  fseek(fp, 0, SEEK_END);\\n  long fsize = ftell(fp);\\n  fseek(fp, 0, SEEK_SET);\\n\\n  char *string = malloc(fsize + 1);\\n\\n  fread(string, fsize, 1, fp);\\n  fclose(fp);\\n\\n  string[fsize] = 0;\\n  printf(\\\"%s\\\\n\\\\n\\\\n\\\", string);\\n\\n  //Going through and adding all the twodigit numbers to the grid in the proper places, making everything an integer as well\\n  int grid[20][20];\\n  int x, y = 0;\\n  for ( int i = 0; i < strlen(string); i = i + 3 ) {\\n    char num[3];\\n    num[0] = string[i];\\n    num[1] = string[i+1];\\n    num[2] = '\\\\0';\\n    //atoi() wanted a C-style string so I had to add the null byte at the end for it to work\\n    int number = atoi(num);\\n    grid[y][x] = number;\\n    x += 1;\\n    if (x == 20) {\\n      x = 0;\\n      y += 1;\\n    }\\n  }\\n\\n  //Checking to make sure everything is right\\n  for ( int i = 0; i < 20; i++ ) {\\n    for ( int j = 0; j < 20; j++ ) {\\n      printf(\\\"%d\\\\t\\\", grid[i][j]);\\n    }\\n    printf(\\\"\\\\n\\\");\\n  }\\n\\n  int max, product = 1;\\n  //Checking the horizontal products\\n  for ( int i = 0; i < 20; i ++ ) {\\n    for ( int j = 0; j < 17; j++ ) {\\n      for ( int k = 0; k < 4; k++ ) {\\n        product *= grid[i][j+k];\\n      }\\n      if ( product > max ) {\\n        max = product;\\n      }\\n      product = 1;\\n    }\\n  }\\n\\n  //Checking the vertical products\\n  for ( int i = 0; i < 17; i++ ) {\\n    for ( int j = 0; j < 20; j++ ) {\\n      for ( int k = 0; k < 4; k++ ) {\\n        product *= grid[i+k][j];\\n      }\\n      if ( product > max ) {\\n        max = product;\\n      }\\n      product = 1;\\n    }\\n  }\\n\\n  //Checking forward diagonals\\n  for ( int i = 0; i < 17; i ++ ) {\\n    for ( int j = 0; j < 17; j++ ) {\\n      for ( int k = 0; k < 4; k++ ) {\\n        product *= grid[i+k][j+k];\\n      }\\n      if ( product > max ) {\\n        max = product;\\n      }\\n      product = 1;\\n    }\\n  }\\n\\n  //Checking backwards diagonals 19,0 18,1 17,2 16,3\\n  for (int i = 19; i > 2; i-- ) {\\n    for ( int j = 0; j < 17; j++ ) {\\n      for (int k = 0; k < 4; k++ ) {\\n        product *= grid[i-k][j+k];\\n      }\\n      if ( product > max ) {\\n        max = product;\\n      }\\n      product = 1;\\n    }\\n  }\\n  printf(\\\"The maximum product of 4 adjacent digits is: %d\\\\n\\\", max);\\n}\\n\")), mdx(\"h2\", null, \"The Output\"), mdx(\"p\", null, \"It printed, a lot here. The answer is on the last line, most of this was just for checking my work along the way.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08\\n49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00\\n81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65\\n52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91\\n22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80\\n24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50\\n32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70\\n67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21\\n24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72\\n21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95\\n78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92\\n16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57\\n86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58\\n19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40\\n04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66\\n88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69\\n04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36\\n20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16\\n20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54\\n01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48\\n\\n\\n8   2   22  97  38  15  0   40  0   75  4   5   7   78  52  12  50  77  91  8\\n49  49  99  40  17  81  18  57  60  87  17  40  98  43  69  48  4   56  62  0\\n81  49  31  73  55  79  14  29  93  71  40  67  53  88  30  3   49  13  36  65\\n52  70  95  23  4   60  11  42  69  24  68  56  1   32  56  71  37  2   36  91\\n22  31  16  71  51  67  63  89  41  92  36  54  22  40  40  28  66  33  13  80\\n24  47  32  60  99  3   45  2   44  75  33  53  78  36  84  20  35  17  12  50\\n32  98  81  28  64  23  67  10  26  38  40  67  59  54  70  66  18  38  64  70\\n67  26  20  68  2   62  12  20  95  63  94  39  63  8   40  91  66  49  94  21\\n24  55  58  5   66  73  99  26  97  17  78  78  96  83  14  88  34  89  63  72\\n21  36  23  9   75  0   76  44  20  45  35  14  0   61  33  97  34  31  33  95\\n78  17  53  28  22  75  31  67  15  94  3   80  4   62  16  14  9   53  56  92\\n16  39  5   42  96  35  31  47  55  58  88  24  0   17  54  24  36  29  85  57\\n86  56  0   48  35  71  89  7   5   44  44  37  44  60  21  58  51  54  17  58\\n19  80  81  68  5   94  47  69  28  73  92  13  86  52  17  77  4   89  55  40\\n4   52  8   83  97  35  99  16  7   97  57  32  16  26  26  79  33  27  98  66\\n88  36  68  87  57  62  20  72  3   46  33  67  46  55  12  32  63  93  53  69\\n4   42  16  73  38  25  39  11  24  94  72  18  8   46  29  32  40  62  76  36\\n20  69  36  41  72  30  23  88  34  62  99  69  82  67  59  85  74  4   36  16\\n20  73  35  29  78  31  90  1   74  31  49  71  48  86  81  16  23  57  5   54\\n1   70  54  71  83  51  54  69  16  92  33  48  61  43  52  1   89  19  67  48\\nThe maximum product of 4 adjacent digits is: 70600674\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","timeToRead":1,"tableOfContents":{"items":[{"url":"#the-problem-states","title":"The Problem States"},{"url":"#my-solution","title":"My Solution"},{"url":"#the-output","title":"The Output"}]},"excerpt":"The Problem States My Solution It was a long and cumbersome process to open the file and make sure everything is working right in C so I…"}},"pageContext":{"id":"4129afc6-ae47-5e62-9f9e-8836e297b35a"}}}