{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/go-exercise-images-solutions/","result":{"data":{"site":{"siteMetadata":{"author":"Jeff Willette"}},"authorAvatar":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='400'%20viewBox='0%200%20400%20400'%20preserveAspectRatio='none'%3e%3cpath%20d='M154%2018l-12%202c-4%202-38%203-47%201-13-3-20-1-13%202%205%202%2010%207%2010%209l1%207%201%205c-2%200-5-4-8-8l-2-4-1%203%201%205%201%203c-1%200-2-1-2-3-3-7-5%200-5%2015-1%2014%205%2024%2016%2026l6%202-5%2013c-11%2025-12%2031-15%2071v11h-3c-6%201-7%206-6%2017v17c-3%2024%201%2049%2011%2059%203%203%204%205%205%2010%206%2032%2010%2038%2037%2067%2015%2016%2017%2018%2017%2021%200%204-7%2018-10%2020-7%205-14%208-26%2010a271%20271%200%200047-1l-3-1-2-21%205%204%206%204v1c-1%200%207%206%209%206v1c-2%203-1%207%203%208%203%200%204-1%202-2l-1-2%202%201%209%201%208%201c1%202%2018%201%2018%200l-1-2-1-4-1-4-1-1c1-2%200-2-2-1-5%201-3-1%204-4l20-14%207-5%2013-12c8-7%208-7%208-4a587%20587%200%2000-4%2030c1%205-5%2012-14%2019l-3%203h43c23%200%2042%200%2041-1l-15-4-21-7-7-3c-5-2-7-3-11-9l-5-7c-1%200-1-11%201-24%201-6%202-8%205-12%2010-10%2020-30%2023-45%202-7%203-8%209-8%2019-3%2025-8%2031-28%206-16%207-25%207-43%200-19-1-24-8-28-3-2-4-2-8-1s-4%201-6-1c-3-4-7-49-5-58%202-11-2-25-10-35-4-5-5-7-3-11%203-3%202-7-2-12l-4-5c0-2-7-13-12-18s-15-11-18-11l-2-1c0-1-11-3-26-4-20-1-31-3-34-4l-27-4-15%202m-9%208l33%206c6%200%208%201%208%202l-2%202c-3%201-2%201%204%203l8%202c-1-3%203-2%2010%202l7%203-10-7-7-5c-1-2-14-5-27-5-5%200-7%200-8-2l-10-2c-6%200-8%200-6%201m-30%202l23%206c2%201%203%201%203%203-1%202%200%203%2010%204%208%200%209-1%201-3-5-1-5-3-1-3l-8-2a323%20323%200%2001-28-5M80%2047c0%206%202%2015%204%2020%203%205%203%205%202-1l-2-11%201%201c0%202%2018%2012%2023%2012%204%200%201-2-5-5-10-3-15-8-22-18-1-1-1-1-1%202m27%205c-2%201-1%202%202%204%203%201%204%202%203%203-2%204%205%207%208%204h3c3%201%203%201%203-1%200-1-9-7-18-11l-1%201m3%2043l-3%205c-4%206-5%2010-7%2021a170%20170%200%2001-5%2025l-1%202-2%2029-2%2031c-2%204-2%206-1%2012%201%207%201%2010-1%2016v3l2-3c3-2%207-4%207-2l-4%206c-6%206-6%208-3%2028%203%2024%208%2042%2016%2052a860%20860%200%200032%2033c-1-7%201-6%206%205%207%2012%2011%2016%2017%2018%209%203%209%203%2011%200%200-2%202-3%203-4%204-1%205%201%202%204-4%204-3%204%206%204%2016%200%2019-2%2032-20%209-11%2012-10%206%201-3%206-3%206%204%200l11-7c7-5%2028-28%2032-35%206-11%2014-29%2016-39%203-12%205-20%207-22l-1%2014v4l5-2%205-1-2-3c-6-8%203-12%2010-5l4%202%203-5%203-6%202-7c8-12%2010-27%204-39-3-8-4-8-6-5l-3%202%203%206c5%2012%204%2021-3%2027-10%209-11%2010-13%2010-1-1-1%200-1%202s-1%203-3%201v-8c1-8%201-8-1-14-3-7-3-10%201-17%204-8%2021-25%2026-26%204%200%204-1-1-3-4-2-4-2-9%201-7%204-22%2021-24%2028-1%207-4%209-8%205-2-2-2-3-2-15v-15c-6-11-6-10-5-23a567%20567%200%20001-34c0-13-1-16-6-21-2-3-4-4-4-3s-7%201-11-1c-10-4-30-6-63-8-40-3-53-3-55%200-1%201-1%201-2-1-1-3-3%200-3%205%200%203%206%2013%208%2013l1%201c0%203-13-1-17-5-3-4-5-10-3-13%201-3%200-5-3-5l-4-1c-2-1-2-1-4%202m4%2087l-3%202c-6%200-15%2011-10%2013l1%202h2c10-4%2012-4%2024-3%2018%201%2031%201%2032-1%202-2-1-7-7-9-4-2-6-2-14-3l-12-1h-13m107%200l-9%201c-11%200-19%202-20%204l-3%202c-3%200-4%206%200%206l3%202c3%201%2034%202%2043%200%206-1%208-1%2021%204%204%202%205%201%203-2l-1-2c2%200-3-7-9-11l-6-4h-22m-30%2019l1%202-1%201v1l1%202%202%201c1%200%201%201-1%202-6%204-6%209%200%205%203-2%205-1%203%202-2%202-3%207-2%207l3-3c4-4%209-8%2011-8s2%201%202%205v6l-5-1h-5l3%202c5%202%2033%202%2039%200l13-2c12-1%2013-2%203-4-6%200-8-1-10-3-4-3-10-5-18-7l-5-2h4c5%200%2013%203%2019%206%204%202%204%202%206%200%204-2%204-3%200-3-2%200-5%200-7-2-7-4-14-5-26-5-9%200-13-1-14-2-2-1-8-1-9%201h-1l-4-2c-2%200-3%200-2%201m-74%203l-8%204-8%203c-3%200-4%201%200%203%202%201%203%201%206-1%207-5%2013-6%2024-6l10-1c0-2-17-4-24-2m28%204c1%202%201%202-2%201h-23l-10%205c-4%202-8%204-11%204-6%202-6%203%201%203%204%200%207%200%2012%202%205%203%206%203%2021%203%2014%200%2021-1%2019-3l-4-1c-4%200-4%200-4-3%200-5%201-5%206%200%207%206%2010%205%204-2-2-3-2-4%201-1s5%200%202-4c-5-5-13-8-12-4m17%203c-3%202-4%2031-1%2035%201%201%202-1%202-17%201-20%201-19-1-18m-87%205c-3%209%201%2039%206%2043h1l1%202c1%202%201%200%201-7%200-11%200-11-3-16-4-6-6-13-5-21%201-6%200-6-1-1m69%2013c-4%202-14%203-22%202-9-2-14-2-16-1-3%201-2%202%203%202l10%202c10%203%2032-1%2032-5h-7m53%202l5%201%2011%202c8%202%2023%201%2029-1%206-3%205-3-7-2h-19c-12-2-19-2-19%200m-41%2028c-4%206-4%2013%200%2015%202%202%200%202-3%201l-5-2c-2%200-1-4%201-7%202-2%202-4%200-4s-6%205-7%208c0%203%204%208%2010%2011s9%204%209%202l4%202c6%206%2011%206%2016%202l3-2-7%201c-6%200-6%200-10-3l-6-4c-4-1-5-13-2-21%203-6%200-5-3%201m44%202l-1%201c-1-1-2%200-2%201h-1c0-2-4-1-5%201%200%203%200%203%204%202%203-1%203-1%205%201%201%203%200%206-2%206-5%200-21%206-21%208h5l5%201-3%201-1%201h7l1-4%201%201%204%202c4%200%2014-4%2011-5l-4%201h-2l1-1%204-8c0-2%201-1%206%202%2010%206%2024%2011%2030%2010%203%200%202-2%200-2l-3-1-9-3c-10-3-16-7-23-12-6-4-7-5-7-3m-61%205c-4%204-6%206-15%2011-10%206-12%209-12%2013%201%205%202%205%204%200%201-3%203-4%207-7%2011-6%2017-11%2019-18%201-3-1-2-3%201m85%2033c0%201-1%202-12%202a139%20139%200%2000-18%200c2-1%202-1%201-2-2-1-10%200-16%202h-9c-5-2-13-3-11-1%202%203%2015%204%2027%203l6-1-5%201c-7%203-18%202-29%200l-15-3-7-1c-1-1-2-1-5%201-4%203-5%205-1%204%202%200%208%204%2011%207l14%2010c15%209%2038%208%2053-3%2016-10%2020-13%2022-13%204%200%204-2-1-5s-5-3-5-1m-78%208c0%204%205%208%2010%208%202%200%202%200%201%201-2%201-2%201%202%203%207%204%2034%204%2043%200l5-4h-3c-2%201-12%202-13%201-2-1%201-2%205-2l5-2%206-1c4%200%2010-3%2010-5s-26%200-32%203h-17a358%20358%200%2000-22-2m17%2024l3%203c7%202%2030%201%2031-3h-34'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1,"src":"/static/2c4c167c05e10b4e6891182058715e8e/61fd6/jeff.png","srcSet":"/static/2c4c167c05e10b4e6891182058715e8e/69585/jeff.png 200w,\n/static/2c4c167c05e10b4e6891182058715e8e/61fd6/jeff.png 256w","sizes":"(max-width: 256px) 100vw, 256px"}}},"mdx":{"frontmatter":{"title":"Go Exercise Images Solutions","createdAt":"2016-10-12T15:42:36.000Z","updatedAt":"2019-04-19T04:52:26.932Z","categories":["Go","Programming"],"images":[{"publicURL":"/static/920f0314faf423253d0518ce5a80ac5f/go-exercise-images-1.png","childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='400'%20viewBox='0%200%20400%20400'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%2062a907%20907%200%20003%2061l6-4a390%20390%200%200029-17%20903%20903%200%200067-40l8-5a319%20319%200%200024-14%202829%202829%200%200059-35c15-9%2025-8-92-8H0v62M395%205l-2%201-2%201-3%202-3%201-2%201-3%202-3%201-3%202-3%201-1%201-9%204-3%202-3%201-3%202-3%201-3%201-5%203-5%203-3%201-3%202-3%201-3%201-5%203-4%202-4%202-3%202-3%201-3%201-5%203-3%202a513%20513%200%2001-11%205l-1%201-15%207-3%202-3%201-1%201-15%207-3%202-3%201-1%201a126%20126%200%2000-22%2011%20130%20130%200%2000-22%2011A5778%205778%200%20001%20201l-1%2056a729%20729%200%20003%2054l9-6a384%20384%200%200042-24l16-10%209-5a420%20420%200%200144-27l8-4a506%20506%200%200142-26%20445%20445%200%200046-27%201261%201261%200%200157-34%201165%201165%200%200066-39c3-3%208-5%208-3l-1%201-1%203-2%203-1%201-3%209-4%208-1%201-1%201-3%209-4%208-1%201-1%202-1%203-2%203-1%202-1%203-2%203-1%202v1l-1%202c0%202%200%202%202%201l3-2%209-5a576%20576%200%200057-34l8-4v-6l2-62c0-60%201-57-4-55m1%20200l-1%201-9%204-3%202-3%201-3%202-3%201-1%201-9%204-3%202-3%201-3%202-3%201-1%201-9%204-1%201-5%202-3%202-3%201-1%201-9%204-1%201-5%202-3%202-3%201-1%201-15%207-3%202-3%201-1%201-15%207A8099%208099%200%200132%20387l-5%202-1%201-9%204-1%201-3%202-3%201h121l43-1%205-3a402%20402%200%200128-17c8-5%209-5%207%200l-2%205-1%201-1%201-3%207-3%207h28l27-1%207-4a791%20791%200%200139-23%20633%20633%200%200059-35%20622%20622%200%200029-17l4-2%201-11a1208%201208%200%2000-2-100'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1,"src":"/static/920f0314faf423253d0518ce5a80ac5f/d9d7e/go-exercise-images-1.png","srcSet":"/static/920f0314faf423253d0518ce5a80ac5f/69585/go-exercise-images-1.png 200w,\n/static/920f0314faf423253d0518ce5a80ac5f/d9d7e/go-exercise-images-1.png 255w","sizes":"(max-width: 255px) 100vw, 255px"}}},{"publicURL":"/static/04b9106a0d8e1fc17302b945c80a041f/go-exercise-images-2.png","childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='400'%20viewBox='0%200%20400%20400'%20preserveAspectRatio='none'%3e%3cpath%20d='M9%201a36933%2036933%200%2000392%20391c0-2-75-77-194-196A30451%2030451%200%200111%200L9%201m11%200a34831%2034831%200%2000381%20380A28095%2028095%200%200020%201m21%200a31111%2031111%200%2000360%20358c0-2-36-39-178-181C56%2011%2041-4%2041%201m21%200a40541%2040541%200%2000339%20337c0-3-8-12-167-171A4097%204097%200%200062%201m35%200a22245%2022245%200%2000304%20303A17865%2017865%200%200097%201m23%200a19057%2019057%200%2000281%20279A13112%2013112%200%2000120%201m22%200a15792%2015792%200%2000258%20260c1%201%201%201%201-1l-1-4A18619%2018619%200%2000142%201m139%20118a10755%2010755%200%2001120%20120l-1-5A12202%2012202%200%2000164%200c-2%200%2017%2020%20117%20119M197%201a10092%2010092%200%2000204%20203c0-3-7-10-102-105A792%20792%200%2000197%201m24%200a7896%207896%200%2000180%20179A6240%206240%200%2000221%201m21%200a6177%206177%200%2000159%20157c0-2-16-19-77-80-72-72-82-82-82-77m21%200a4684%204684%200%2000138%20135A2069%202069%200%2000263%201m34-1a6606%206606%200%2000102%20104l2%203v-3c0-3-6-10-50-54a670%20670%200%2000-54-50m13%201a2070%202070%200%200091%2090c0-2-16-18-44-47-38-38-47-46-47-43m11%200a1609%201609%200%200079%2076%201862%201862%200%2000-79-76m21%200a1113%201113%200%200059%2058c0-4-1-4-29-32-23-23-30-30-30-26m39%2018l19%2020c1%201%201%200%201-2%200-5-31-37-35-37-3%200-2%202%2015%2019M1%204c0%203%20393%20396%20396%20396A112547%20112547%200%20001%204m0%2034c0%204%20358%20362%20362%20362%202%200-22-25-180-183A3596%203596%200%20001%2038m0%2021c0%204%20338%20341%20341%20341%202%200-31-34-169-172A4225%204225%200%20001%2059m0%2022c0%202%20317%20319%20319%20319%201%200-50-53-158-161A6582%206582%200%20001%2081m0%2023c0%203%20293%20296%20296%20296%201%200-37-39-147-149A4423%204423%200%20001%20104m0%2034c0%204%20259%20262%20262%20262%202%200-23-26-130-132A2467%202467%200%20001%20138m0%2022c0%203%20237%20240%20240%20240A631199%20631199%200%20011%20160m0%2021c0%203%20216%20219%20219%20219%201%200-27-29-109-111C30%20208%201%20180%201%20181m0%2012c0%202%20205%20207%20207%20207L106%20295C35%20225%201%20191%201%20193m0%2012c0%202%20193%20195%20195%20195%201%200-30-33-96-99-67-66-99-98-99-96m0%2034c0%204%20157%20161%20161%20161%203%200-5-9-79-82-74-74-82-82-82-79m0%2021c0%204%20137%20140%20140%20140%202%200-11-14-69-71-57-58-71-71-71-69m0%2022a3282%203282%200%200060%2058c-41-41-60-60-60-58m0%2023c0%204%2092%2095%2095%2095%201%200-9-11-47-49-37-37-48-48-48-46m0%2034c0%204%2058%2061%2061%2061%202%200-2-5-29-32S1%20337%201%20339m0%2021c0%204%2037%2040%2040%2040%201%200-3-5-19-21-17-17-21-21-21-19'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1,"src":"/static/04b9106a0d8e1fc17302b945c80a041f/d9d7e/go-exercise-images-2.png","srcSet":"/static/04b9106a0d8e1fc17302b945c80a041f/69585/go-exercise-images-2.png 200w,\n/static/04b9106a0d8e1fc17302b945c80a041f/d9d7e/go-exercise-images-2.png 255w","sizes":"(max-width: 255px) 100vw, 255px"}}}]},"fields":{"githubLink":"https://github.com/jeffwillette/jeffwillette.github.io.src/tree/dev/data/blog/go-exercise-images-solutions/index.mdx"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Go Exercise Images Solutions\",\n  \"published\": true,\n  \"createdAt\": \"2016-10-12T15:42:36.000Z\",\n  \"updatedAt\": \"2019-04-19T04:52:26.932Z\",\n  \"images\": [\"./go-exercise-images-1.png\", \"./go-exercise-images-2.png\"],\n  \"categories\": [\"Go\", \"Programming\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I wrote two solutions to the Go \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://tour.golang.org/methods/25\"\n  }), \"Exercise: Images\"), \" problem. One of them (the hard\\nway) does a full implementation of all the methods to the interface and the other (easy way) embeds anonymous types\\nto inherit from pre-existing image structs.\"), mdx(\"h2\", null, \"The Hard Way:\"), mdx(props.imgs.Img1, {\n    align: \"left\",\n    width: \"30%\"\n  }), mdx(\"p\", null, \"This code produces the image to the left. I wrote most of it without looking at the current implementations of image\\nstructs in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"image\"), \" package so it can probably be improved a lot.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ShowImage\"), \" is going to use the image package and therefore my code much satisfy the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://golang.org/pkg/image/#Image\"\n  }), \"Image\"), \"\\ninterface within that package which states that an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Image\"), \" must have three methods \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ColorModel()\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Bounds()\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"At(x, y int)\"), \".\\nSo I will have to write custom methods that satisfy this and perform as expected.\"), mdx(\"h2\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"Image\"), \" Struct\"), mdx(\"p\", null, \"This is a 3-dimensional slice that contains \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x\"), \"-axis values, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"y\"), \"-axis values, and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rgba\"), \" pixel values, the other\\nintegers are \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"y\"), \" minimums and maximums.\"), mdx(\"h2\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"NewImage()\"), \" Method\"), mdx(\"p\", null, \"This just initializes the slices and sets the values of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"y\"), \" minimums and maximums according to the input\\nit receives. It returns a pointer to an initialized, but empty (no pixel values) image.\"), mdx(\"h2\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"ColorModel()\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"At()\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"Bounds()\"), \" Methods\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ColorModel()\"), \" method just returns which color model the image will use. There are a lot of color models in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\ncolor\"), \" package such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RGBA\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CMYK\"), \", etc... that are commonly used in most things. I saw no need in reinventing the\\nwheel so I just returned one of the pre-existing color models.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"At()\"), \" method returns a color and takes an x and y pixel value as an input. In order to do this I need to\\ninitialize a color with the RGBA values stored in the pixel at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"y\"), \".  these would be the indexes of 1-4 for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pixel[x][y]\"), \".\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Bounds()\"), \" method said it needed to return an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"image.Rectangle\"), \" so I made one with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"y\"), \" minimums and\\nmaximums and returned it.\"), mdx(\"h2\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"crazyColors()\"), \" Method\"), mdx(\"p\", null, \"I need to have something that will generate \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RGBA\"), \" values for every pixel so I wrote this method that loops through\\nand assigns values to the based on some random linear function for each value in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RGBA\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"package main\\n\\nimport (\\n    \\\"golang.org/x/tour/pic\\\"\\n    \\\"image\\\"\\n    \\\"image/color\\\"\\n)\\n\\ntype Image struct{\\n    // one array for x value, one array for y values, array of integer for pixel RGBA values\\n    image_ [][][]uint8\\n    x0, y0, x1, y1 int\\n}\\n\\nfunc (i *Image) NewImage(x, y int) *Image {\\n    image := make([][][]uint8, y)\\n    for i := 0; i < x; i++ {\\n        image[i] = make([][]uint8, x)\\n        for j := 0; j < y; j++ {\\n            image[i][j] = make([]uint8, 4)\\n        }\\n    }\\n    return &Image{image, 0, 0, x, y}\\n}\\n\\nfunc (p *Image) ColorModel() color.Model { return color.RGBAModel }\\n\\nfunc (p *Image) At(x, y int) color.Color {\\n    var c color.Color\\n    rgba := color.RGBA{\\n        p.image_[x][y][0],\\n        p.image_[x][y][1],\\n        p.image_[x][y][2],\\n        p.image_[x][y][3],\\n    }\\n    c = rgba\\n    return c\\n}\\n\\nfunc (p *Image) Bounds() image.Rectangle {\\n    rectangle := image.Rect(p.x0, p.y0, p.x1, p.y1)\\n    return rectangle\\n}\\n\\nfunc (p *Image) crazyColors() *Image {\\n    for i := 0; i < len(p.image_) - 1; i++ {\\n        for j := 0; j < len(p.image_[i]) - 1; j++ {\\n            p.image_[i][j][0] = uint8(i + j / 2)\\n            p.image_[i][j][1] = uint8(i + j * 2)\\n            p.image_[i][j][2] = uint8(i + j * 2)\\n            p.image_[i][j][3] = uint8(255)\\n        }\\n    }\\n    return p\\n}\\n\\nfunc main() {\\n    var i *Image\\n    i = i.NewImage(255, 255)\\n    i.crazyColors()\\n    pic.ShowImage(i)\\n}\\n\")), mdx(\"h2\", null, \"The Easy Way:\"), mdx(props.imgs.Img2, {\n    align: \"right\",\n    width: \"30%\"\n  }), mdx(\"p\", null, \"This one was much easier since I am inheriting from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"image.RGBA\"), \" struct. All I have to do in this case is to make\\na \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"crazyColors()\"), \" method to give the pixels \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RGBA\"), \" values.\"), mdx(\"h2\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"crazyColors()\"), \" Method\"), mdx(\"p\", null, \"In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"image.RGBA\"), \" struct \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://golang.org/pkg/image/#RGBA\"\n  }), \"Go Docs\"), \", there is only one array for pixel values.\\nOne pixel is 4 consecutive integers, and they simulate having a 2-dimensional slice by also having a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"stride\"), \" which\\nis the distance in bytes between vertically aligned pixels. This is a simpler way to store the information than what\\nI came up with.\"), mdx(\"p\", null, \"So to give the values, I iterate through the slice by increments of 4 and assign values again based on some random\\nmathematical function I wrote on the spot. This code produces the image pictured to the right.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"package main\\n\\nimport (\\n    \\\"golang.org/x/tour/pic\\\"\\n    \\\"image\\\"\\n)\\n\\ntype Image struct{\\n    image.RGBA\\n}\\n\\nfunc (i Image) crazyColors() Image {\\n    for p := 0; p < len(i.Pix); p += 4 {\\n        i.Pix[p] = uint8(p + p*2)\\n        i.Pix[p+1] = uint8(p + p*4)\\n        i.Pix[p+2] = uint8(p + p*6)\\n        i.Pix[p+3] = uint8(p + p*8)\\n    }\\n    return i\\n}\\n\\nfunc main() {\\n    rect := image.Rect(0,0,255,255)\\n    m := Image{*image.NewRGBA(rect)}\\n    m.crazyColors()\\n    pic.ShowImage(&m)\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","timeToRead":2,"tableOfContents":{"items":[{"url":"#the-hard-way","title":"The Hard Way:"},{"url":"#the-image-struct","title":"The Image Struct"},{"url":"#the-newimage-method","title":"The NewImage() Method"},{"url":"#the-colormodel-at-and-bounds-methods","title":"The ColorModel(), At(), and Bounds() Methods"},{"url":"#the-crazycolors-method","title":"The crazyColors() Method"},{"url":"#the-easy-way","title":"The Easy Way:"},{"url":"#the-crazycolors-method-1","title":"The crazyColors() Method"}]},"excerpt":"I wrote two solutions to the Go  Exercise: Images  problem. One of them (the hard\nway) does a full implementation of all the methods to the…"}},"pageContext":{"id":"12955d85-3e35-5ae1-bf6a-31326be8a208"}}}